[{"path":"index.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"","code":""},{"path":"index.html","id":"Information","chapter":"1 Introduction","heading":"1.1 강의 개요","text":"목표: 생물 데이터 분석을 위한 R 사용법과 (Rstudio, Tidyverse, Bioconductor 포함) 프로그래밍 기술을 습득함장소: 코빅 3층 전산교육장(1304호)강사: 한국생명공학연구원 합성생물학전문연구단 김하성연락처: 042-860-4372, haseong@kribb.re.kr강의자료: https://greendaygh.github.io/kribbr2022/","code":""},{"path":"index.html","id":"Schedule","chapter":"1 Introduction","heading":"1.2 강의 계획","text":"R 사용법 및 데이터 분석 기초 5.19(목), 5.26(목)R/Tidyverse 데이터 분석 중급 6.9(목), 6.16(목)R/Tidyverse 활용 데이터 가시화 7.7(목), 7.14(목)R/Bioconductor 활용한 바이오데이터 분석 기초 8.4(목), 8.11(목)R/Bioconductor 활용한 NGS 데이터 분석 기초 9.1(목), 9.15(목)R/Bioconductor 활용한 NGS 데이터 분석 및 Workflow 10.6(목), 10.13(목)","code":""},{"path":"index.html","id":"References","chapter":"1 Introduction","heading":"1.3 참고 자료","text":"R 홈페이지Rstudio 홈페이지BioconductorR 기본 문서들R ebooksCheat SheetsRStudio WebinarsShinyHadley githubR Data ScienceUsing R Introductory Statistics John Verzani\nFree version 1st Edition\nSecond edition\nFree version 1st EditionSecond editionBioinformatics Data Skills Vince BuffaloIntroductory Statistics R Dalgaard일반통계학 (영지문화사, 김우철 외)","code":""},{"path":"rrstudio-basics.html","id":"rrstudio-basics","chapter":"2 R/Rstudio basics","heading":"2 R/Rstudio basics","text":"","code":""},{"path":"rrstudio-basics.html","id":"what-is-r-rstudio","chapter":"2 R/Rstudio basics","heading":"2.1 What is R / Rstudio","text":"R은 통계나 생물통계, 유전학을 연구하는 사람들 사이에서 널리 사용되는 오픈소스 프로그래밍 언어 입니다. Bell Lab에서 개발한 S 언어에서 유래했으며 많은 라이브러리 (다른 사람들이 만들어 놓은 코드)가 있어서 쉽게 가져다 사용할 수 있습니다. R은 복잡한 수식이나 통계 알고리즘을 간단히 구현하고 사용할 수 있으며 C, C++, Python 등 다른 언어들과의 병행 사용도 가능합니다. R은 IEEE에서 조사하는 Top programming languages에서 2018년 7위, 2019년 5위, 2020년 6위, 2021년 7위로 꾸준히 높은 사용자를 확보하며 빅데이터, AI 시대의 주요한 프로그래밍 언어로 사용되고 있습니다.https://spectrum.ieee.org/top-programming-languages/R은 데이터를 통계분석에 널리 사용되는데 이는 데이터를 눈으로 확인하기 위한 visualization 이나 벡터 연산 등의 강력한 기능 때문에 점점 더 많은 사람들이 사용하고 있습니다. 기존에는 속도나 확장성이 다른 언어들에 비해 단점으로 지적되었으나 R 언어의 계속적인 개발과 업데이트로 이러한 단점들이 빠르게 보완되고 있습니다. R 사용을 위해서는 R 언어의 코어 프로그램을 먼저 설치하고 그 다음 R 언어용 IDE(Integrated Development Environment)인 RStudio 설치가 필요합니다.Rstudio는 R 언어를 위한 오픈소스 기반 통합개발환경(IDE)으로 R 프로그래밍을 위한 편리한 기능들을 제공해 줍니다. R언어가 주목을 받고 두터운 사용자 층을 확보할 수 있게된 핵심 동력이 Rstudio 입니다. 자체적으로 최고수준의 오픈소스 개발팀이 있으며 tidyverse, `,shiny` 등의 데이터 분석 관련 주요 패키지를 개발하였고 정기적으로 conference 개최를 하면서 기술 보급의 핵심 역할을 하고 있습니다.https://www.rstudio.com/","code":""},{"path":"rrstudio-basics.html","id":"r-rstudio-installation","chapter":"2 R/Rstudio basics","heading":"2.2 R / Rstudio Installation","text":"","code":""},{"path":"rrstudio-basics.html","id":"r-설치","chapter":"2 R/Rstudio basics","heading":"2.2.1 R 설치","text":"R 사이트에 접속 후 (https://www.r-project.org/) 좌측 메뉴 상단에 위치한 CRAN 클릭.미러 사이트 목록에서 Korea의 아무 사이트나 들어감Download R Windows를 클릭 후 base 링크 들어가서Download R x.x.x Windows 링크 클릭으로 실행 프로그램 다운로드로컬 컴퓨터에 Download 된 R-x.x.x-win.exe 를 실행 (2022.5 현재 R 버전은 4.2.0).설치 프로그램의 지시에 따라 R 언어 소프트웨어 설치를 완료","code":""},{"path":"rrstudio-basics.html","id":"rstudio-설치","chapter":"2 R/Rstudio basics","heading":"2.2.2 Rstudio 설치","text":"사이트에 접속 (https://www.rstudio.com/), 상단의 Products > RStudio 클릭RStudio Desktop 선택Download RStudio Desktop 클릭RStudio Desktop Free 버전의 Download를 선택하고Download RStudio Windows 클릭, 다운로드로컬 컴퓨터에 다운로드된 RStudio-x.x.x.exe 실행 (2022.5 현재 RStudio Desktop 2022.02.2+485)설치 가이드에 따라 설치 완료","code":""},{"path":"rrstudio-basics.html","id":"rstudio-interface","chapter":"2 R/Rstudio basics","heading":"2.3 Rstudio interface","text":"기본 화면에서 좌측 상단의 공간은 코드편집창, 좌측 하단은 콘솔창각 위치를 기호에 따라서 바꿀 수 있음 (View –> Pane)","code":""},{"path":"rrstudio-basics.html","id":"keyboard-shortcuts","chapter":"2 R/Rstudio basics","heading":"2.3.1 Keyboard shortcuts","text":"참고사이트\nhttps://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-Shortcuts\nTools –> Keyboard shortcut Quick Reference (Alt + Shift + K)\nhttps://support.rstudio.com/hc/en-us/articles/200711853-Keyboard-ShortcutsTools –> Keyboard shortcut Quick Reference (Alt + Shift + K)코드편집창 이동 (Ctrl + 1) 콘솔창 이동(Ctrl + 2)한 줄 실행 (Ctrl + Enter)저장 (Ctrl + S)주석처리 (Ctrl + Shift + C)\n또는 #으로 시작하는 라인\n또는 #으로 시작하는 라인텝 이동 (Ctrl + F11, Ctrl + F12)코드편집창 확대 (Shift + Ctrl + 1) 콘솔창 확대 (Shift + Ctrl + 2)컬럼 편집 (Alt + 마우스 드레그)자동 완성 기능 (Tab completion) RStudioExercises코드편집창에서 다음을 입력/실행하고 단축키를 사용하여 주석을 넣으시오단축키 Ctrl + enter로 코드 실행단축키 Ctrl + 2로 커서 콘솔창으로 이동x값 x+y값 확인단축키 Ctrl + 1로 코드편집창 이동단축키 Ctrl + Shift + C 사용","code":"\n# x <- 10\n# y <- 20"},{"path":"rrstudio-basics.html","id":"environment-and-files","chapter":"2 R/Rstudio basics","heading":"2.3.2 Environment and Files","text":"","code":""},{"path":"rrstudio-basics.html","id":"start-a-project","chapter":"2 R/Rstudio basics","heading":"2.4 Start a project","text":"프로젝트를 만들어서 사용할 경우 파일이나 디렉토리, 내용 등을 쉽게 구분하여 사용 가능합니다. 아래와 같이 임의의 디렉토리에 kribbR 이라는 디렉토리를 생성하고 lecture1 프로젝트를 만듭니다.File > New Project > New Directory > New Project > “kribbR” > Create Project시작할 때는 해당 디렉토리의 xxx.Rproj 파일을 클릭합니다. Rstudio 오른쪽 상단 프로젝트 선택을 통해서 빠르게 다른 프로젝트의 작업공간으로 이동할 수 있습니다.","code":""},{"path":"rrstudio-basics.html","id":"hello-world","chapter":"2 R/Rstudio basics","heading":"2.4.1 Hello world","text":"File > New File > R markdown > OK","code":"\nmystring <- \"Hello \\n world!\"\ncat(mystring)\nprint(mystring)"},{"path":"rrstudio-basics.html","id":"getting-help","chapter":"2 R/Rstudio basics","heading":"2.5 Getting help","text":"R은 방대한 양의 도움말 데이터를 제공하며 다음과 같은 명령어로 특정 함수의 도움말과 예제를 찾아볼 수 있습니다. ? 명령을 사용하면 되며 구글이나 웹에서도 도움을 얻을 수 있습니다.또한 https://www.rstudio.com/resources/cheatsheets/ 에서는 다양한 R언어의 기능을 한 눈에 알아볼 수 있게 만든 cheatsheet 형태의 문서를 참고할 수 있습니다.","code":"\nhelp(\"mean\")\n?mean\nexample(\"mean\")\nhelp.search(\"mean\")\n??mean\nhelp(package=\"MASS\")"},{"path":"rrstudio-basics.html","id":"r-packages-and-dataset","chapter":"2 R/Rstudio basics","heading":"2.6 R packages and Dataset","text":"R 패키지는 함수와 데이터셋의 묶음으로 다른 사람들이 만들어 놓은 코드나 기능을 가져와서 사용하므로써 코드 작성의 수고로움을 줄이고 편리하고 검증된 함수(기능)를 빠르게 도입하여 사용할 수 있다는 장점이 있습니다. 예를 들어 sd() 함수는 stats package에서 제공하는 함수로써 표준편차 계산을 위한 별도의 함수를 만들어서 사용할 필요가 없이 바로 (stats 패키지는 R 기본 패키지로) 별도 설치 없이 바로 사용 가능합니다.이러한 패키지는 인터넷의 repository에서 구할 수 있으며 대표적인 repository는 Comprehensive R Archive Network (CRAN) (http://cran.r-project.org/web/views/) 와 생물학자를 위한 Bioconductor (http://www.bioconductor.org/) 가 있습니다. 이러한 패키지의 설치는 아래와 같이 RStudio를 이용하거나 콘솔창에서 install.packages() 함수를 이용할 수 있습니다.패키지를 설치하고 사용하기 위해서는 library() 함수를 사용해서 관련 명령어를 사용하기 전에 미리 loading 해 두어야 합니다. 한 번 로딩으로 작업 세션이 끝날때까지 관련된 함수를 사용할 수 있으나 R 세션이나 RStudio를 재시작 할 경우 다시 로딩해야 사용할 수 있습니다.R 설치 디렉토리R 패키지 설치 디렉토리일반적으로 패키지 안에 관련된 데이터도 같이 저장되어 있으며 data() 함수를 이용해서 패키지 데이터를 사용자 작업공간에 복사해서 사용 가능합니다.이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다.","code":"\nlibrary(UsingR)\n.libPaths()\npath.package()\nhead(rivers)\nlength(rivers)\nclass(rivers)\ndata(rivers)\ndata(package=\"UsingR\")\nlibrary(HistData)\nhead(Cavendish)\nstr(Cavendish)\nhead(Cavendish$density2)"},{"path":"rmarkdown.html","id":"rmarkdown","chapter":"3 Rmarkdown","heading":"3 Rmarkdown","text":"Rmarkdown은 데이터를 분석하는 코드와 리포트를 동시에 수행할 수 있는 일종의 통합 문서입니다. 워드나 아래한글에서 프로그래밍과 데이터분석을 위한 코드를 작성할 수 있는 경우라고 생각해도 됩니다. Plain-text 기반의 markdown 문법을 사용하며 Rmarkdown으로 작성된 문서는 HTML, PDF, MS word, Beamer, HTML5 slides, books, website 등 다양한 포멧의 출력물로 변환할 수 있습니다.Image rmarkdown.rstudio.comRmarkdown 웹사이트에 Rmarkdown 소개 동영상과 Rmarkdown 공식 사이트 메뉴얼 관련 서적 Rmarkdown: Definitive Guide를 참고하세요. 또한 Rmarkdown을 사용할 때 cheatsheet를 옆에 두고 수시로 보면서 사용하시면 많은 도움이 될 수 있습니다.","code":""},{"path":"rmarkdown.html","id":"rmarkdown의-기본-작동-원리","chapter":"3 Rmarkdown","heading":"3.1 Rmarkdown의 기본 작동 원리","text":"Rmarkdown은 plain text 기반으로 작성되며 Rmd 라는 확장자를 갖는 파일로 저장됩니다. 다음과 같은 텍스트 파일이 Rmd 파일의 전형적인 예 입니다.위 예제에서 네 가지 다른 종류의 컨텐츠를 볼 수 있습니다. 하나는 - - - 으로 둘러쌓인 내용으로 YAML 이라고 하며 JSON과 같은 데이터 직렬화를 수행하는 하나의 데이터 저장 포멧입니다. 백틱(`) 으로 둘러쌓인 코드청그(Code Chunks)라고 하는 부분에는 R이나 python 등의 다양한 코드(실재 작동하는)를 넣어서 사용합니다. 그리고 ### 으로 표시된 글은 제목 글을 나타내며 나머지는 일반적인 텍스트를 나타냅니다.이러한 Rmarkdown 파일은 render라는 명령어로 원하는 포맷의 문서로 변환할 수 있습니다. 다음 예의 파일을 pdf 형식으로 rendering 하기 위해서는 YAML에 pdf 임을 명시하고 아래와 같이 render함수를 사용하면 됩니다. 또는 Rstudio 코드 입력창 상단의 Knit 버튼으로 pdf나 html 문서를 생성할 수 있습니다.Rmarkdown의 작동 원리는 Rmd 파일을 만든 후 render 함수를 부르면 knitr 소프트웨어가 R 코드를 실행시킨 후 markdown (.md) 파일을 생성합니다. 이 후 .md 파일을 pandoc 이라는 문서변환기가 원하는 문서 형태로 전환해 줍니다.","code":"---\ntitle: \"Lecture3\"\noutput:\n  html_document:\n    toc: yes\n    toc_float: yes\n    toc_depth: 2\n    number_sections: yes\n---\nrender(\"examples/test.Rmd\", output_format = \"pdf_document\")"},{"path":"rmarkdown.html","id":"코드-입력","chapter":"3 Rmarkdown","heading":"3.2 코드 입력","text":"Rmarkdown에서 사용하는 코드청크는 CTRL+ALT+단축키를 사용해서 넣을 수 있으며 다음과 같은 몇 가지 옵션으로 코드 스니펫들의 실행/숨김 여부를 결정할 수 있습니다.include = FALSE : 코드는 실행되지만 보고서에 결과와 코드가 보여지지 않음echo = FALSE : 코드는 실행되고 보고서에 결과가 포함되지만 코드는 보여지지 않음eval = FALSE : 코드가 실행되지 않지만 보고서에 코드는 보여짐message = FALSE, warning=FALSE, error=FALSE : 코드에 의해서 발생되는 메세지/경고/에러가 보고서에 보여지지 않음fig.cap = \"...\" : 코드로 그려지는 그래프에 캡션을 붙일 수 있음코드청크 옵션 예시실행 결과는 아래와 같습니다.Rmarkdown에서는 ` r`을 사용해서 코드청크가 아닌 곳에 R 코드를 넣을 수 있습니다. 또한 R 언어 외에도 Python, SQL, Bash, Rcpp, Stan, JavaScript, CSS 등의 다양한 프로그래밍 언어에 대해서도 코드청크 기능을 사용할 수 있습니다. 그런데 이러한 언어들이 사용 가능해지기 위해서는 해당 언어들을 실행해주는 엔진이 있어야 하며 python의 경우 reticulate 라는 패키지가 이러한 기능을 담당합니다. 이 패키지를 설치할 경우 miniconda라는 가상환경 및 데이터 분석을 위한 오픈소스 패키지가 자동으로 설치됩니다.아래는 위에 해당하는 소스코드 입니다.","code":"\n# default\nn <- c(1, 2, 3)\nmean(n)\n#> [1] 2\n# eval=FALSE\nn <- c(1, 2, 3)\nmean(n)#> [1] 2\nlibrary(reticulate)x = \"hello, python in R\"\nprint(x.split(' '))"},{"path":"rmarkdown.html","id":"markdown-문법","chapter":"3 Rmarkdown","heading":"3.3 Markdown 문법","text":"마크다운은 plain text 기반의 마크업 언어로서 마크업 언어는 태그 등을 이용해서 문서의 데이터 구조를 명시하는데 이러한 태그를 사용하는 방법 체계를 마크업 언어라고 합니다. 가장 대표적으로 html 이 있습니다.마크다운도 몇 가지 태그를 이용해서 문서의 구조를 정의하고 있으며 상세한 내용은 Pandoc 마크다운 문서를 참고하시기 바랍니다. 마크다운언어의 철학은 쉽게 읽고 쓸 수 있는 문서입니다. plain text 기반으로 작성되어 쓰기 쉬우며 (아직도 사람들이 메모장 많이 사용하는 이유와 같습니다) 태그가 포함되어 있어도 읽는데 어려움이 없습니다. 위 html 언어와 아래 markdown 파일의 예들을 보시면 그 차이를 어렵지 않게 이해할 수 있습니다.마크다운에서는 Enter를 한 번 입력해서 줄바꿈이 되지 않습니다. <br> 또는 문장 마지막에 공백을 두 개 입력하면 되겠습니다.이 문장은 줄바꿈이\n되지 않습니다이 분장은 줄바꿈이\n됩니다마크다운 테그를 몇 가지 살펴보면 먼저 # 을 붙여서 만드는 header 가 있습니다.Block quotationsThis block quote. paragraph two linesThis block quote.block quote within block quote.ItalicBoldNaver link이미지를 직접 삽입하고 가운데 정렬합니다.자동차 모델에 따른 고속도로 연비 분포첫 번째두 번째세 번째아이템 1아이템 2아이템 3\n아이템 3-1\n아이템 3-2\n아이템 3-1아이템 3-2참고로 소스코드 그대로 표현하기 위해서는 ~~~ 를 사용합니다.","code":"    <html>\n      <head>\n        <title> Hello HTML <\/title>\n      <\/head>\n      <body>\n      Hello markup world!\n      <\/body>\n    <\/html>이 문장은 줄바꿈이 \n되지 않습니다이 분장은 줄바꿈이<br>\n됩니다# A level-one header\n## A level-two header\n### A level-three header\n\n# A level-one header {#l1-1}\n## A level-two header {#l2-1}\n### A level-three header {#l3-1}\n\n# A level-one header {#l1-2}\n## A level-two header {#l2-2}\n### A level-three header {#l3-2}> This is block quote. This paragraph has two lines> This is a block quote.\n>\n> > A block quote within a block quote.*Italic***Bold**[Naver link](https://www.naver.com/)<center>\n![자동차 모델에 따른 고속도로 연비 분포](images/rmarkdown/000002.png){width=\"200\"}\n<\/center>1.  첫 번째\n2.  두 번째\n3.  세 번째\n\n-   아이템 1\n-   아이템 2\n-   아이템 3\n    -   아이템 3-1\n    -   아이템 3-2"},{"path":"rmarkdown.html","id":"스타일","chapter":"3 Rmarkdown","heading":"3.4 스타일","text":"아래와 같이 코드청크를 이용해서 css 코드를 삽입하고 해당되는 class 또는 id에 해당하는 내용에 스타일을 적용할 수 있습니다.소스코드","code":"<div id='header1'>\n소스코드 \n<\/div>"},{"path":"rmarkdown.html","id":"테이블","chapter":"3 Rmarkdown","heading":"3.5 테이블","text":"kable 함수를 이용하여 Rmarkdown 문서에 포함되는 표를 원하는 방향으로 작성할 수 있습니다. mtcars는 데이터프레임 형식의 데이터입니다.TABLE3.1: knitr kable.","code":"\nknitr::kable(\n  mtcars[1:5, ], \n  caption = \"A knitr kable.\"\n)"},{"path":"rmarkdown.html","id":"yaml-헤더","chapter":"3 Rmarkdown","heading":"3.6 YAML 헤더","text":"Rmarkdown 파일에서 YAML의 가장 중요한 기능은 output 포멧을 지정하는 것이며 title, author, date, 등을 설정할수도 있습니다.","code":"---\nlayout: page\ntitle: \"R프로그래밍\"\nsubtitle: \"Rmarkdown 활용법\"\noutput:\n  html_document:\n    css: style.css\n    includes:\n      in_header: header.html\n      after_body: footer.html\n    theme: default\n    toc: yes\n    toc_float: true\n    highlight: tango\n    code_folding: show\n    number_sections: TRUE\nmainfont: NanumGothic\n---"},{"path":"rmarkdown.html","id":"output-format","chapter":"3 Rmarkdown","heading":"3.7 Output format","text":"주요 문서 포멧으로 다음과 같은 몇 가지가 있습니다. 상세한 내용은 Rmarkdown output format을 참고하시기 바랍니다.html_document - HTML document w/ Bootstrap CSSpdf_document - PDF document (via LaTeX template)word_document - Microsoft Word document (docx)ioslides_presentation - HTML presentation ioslidesbeamer_presentation - PDF presentation LaTeX Beamerpowerpoint_presentation: PowerPoint presentationExercises“KRIBBR2022-Lecture2” 라는 이름의 다음과 같은 형태의 Rmarkdown 문서를 만들고 이 번 강의의 실습 코드 및 설명, 질문, 코멘트 등을 적어 보시기 바랍니다.이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다.","code":""},{"path":"r-programming.html","id":"r-programming","chapter":"4 R programming","heading":"4 R programming","text":"","code":""},{"path":"r-programming.html","id":"console-calculator","chapter":"4 R programming","heading":"4.1 Console calculator","text":"콘솔에서 바로 계산을 수행할 수 있습니다. 참고로 이전에 수행한 명령은 콘솔에 커서가 있는 상태에서 위 아래 화살표를 누르면 볼 수 있고 엔터를 눌러 재사용 할 수 있습니다. ;을 사용하면 두 개의 명령을 동시에 수행할 수 있습니다.\\[ 2 + 2 \\]\n\\[ ((2 - 1)^2 + (1 - 3)^2)^{1/2} \\]Exercises다음 공식들을 계산하는 R 코드를 작성하시오\\[ \\sqrt{(4+3)(2+1)} \\]\\[ 2^3 + 3^2 \\]\\[ \\frac{0.25 - 0.2}{\\sqrt{0.2 (1-0.2)/100}}\\]","code":"2 + 2\n((2 – 1)^2 + (1 – 3)^2 )^(1/2)\n2 + 2; 2 - 2"},{"path":"r-programming.html","id":"what-is-a-programming-language","chapter":"4 R programming","heading":"4.2 What is a programming language","text":"R은 programming language로서 다른 프로그래밍 언어와 같이 몇 가지 공통적 개념을 가집니다 (변수, 자료형, 함수, 조건문, 반복문)","code":""},{"path":"r-programming.html","id":"terminology","chapter":"4 R programming","heading":"4.2.1 Terminology","text":"Session: R 언어 실행 환경Console: 명령어 입력하는 창Code: R 프로그래밍 변수/제어문 모음Object: 변수, 함수 등 프로그래밍에서 사용되는 모든 객체 (Data structure)\narray: 1D, 2D, 3D, … 형태 값들의 모임\nvector: 1차원 형태 값들의 모임 combine function c() EX: c(6, 11, 13, 31, 90, 92)\nmatrix: 2차원 형태 값들의 모임 (같은 타입 값으로 구성)\ndata frame: 2차원 형태 값들의 모임 (다른 타입 값 구성 가능)\nlist: vector, matrix, data.frame 및 list 등 다양한 객체를 원소로 가집\narray: 1D, 2D, 3D, … 형태 값들의 모임vector: 1차원 형태 값들의 모임 combine function c() EX: c(6, 11, 13, 31, 90, 92)matrix: 2차원 형태 값들의 모임 (같은 타입 값으로 구성)data frame: 2차원 형태 값들의 모임 (다른 타입 값 구성 가능)list: vector, matrix, data.frame 및 list 등 다양한 객체를 원소로 가집function: 특정 기능 수행, [함수이름, 입력값 (arguments), 출력값 (return)] 으로 구성Data (value): 값 - 자료형 (Data type)\nIntegers\ndoubles/numerics\nlogicals\ncharacters\nfactor: 범주형\nIntegersdoubles/numericslogicalscharactersfactor: 범주형Conditionals (조건, 제어):\n, ==, & (), | () Ex: (2 + 1 == 3) & (2 + 1 == 4)\n, : 반복 수\n, ==, & (), | () Ex: (2 + 1 == 3) & (2 + 1 == 4), : 반복 수","code":""},{"path":"r-programming.html","id":"data-and-variables","chapter":"4 R programming","heading":"4.3 Data and variables","text":"","code":""},{"path":"r-programming.html","id":"data","chapter":"4 R programming","heading":"4.3.1 Data","text":"일반적으로 데이터의 의미는 사실을 나타내는 수치입니다.맥도너 정보경제학 (1963)\n지혜 (wisdom) : 패턴화된 지식\n지식 (knowledge) : 가치있는 정보\n정보 (information) : 의미있는 데이터\n데이터 (data) : 단순한 사실의 나열\n지혜 (wisdom) : 패턴화된 지식지식 (knowledge) : 가치있는 정보정보 (information) : 의미있는 데이터데이터 (data) : 단순한 사실의 나열데이터는 속성에 따라서 다음과 같이 분류할 수 있습니다.범주형 - 질적 데이터, 숫자로 나타낼 수 있으나 의미 없음\n명목형 (Nominal) - 사람 이름\n순서형 (Ordinal) – 달리기 도착 순서\n명목형 (Nominal) - 사람 이름순서형 (Ordinal) – 달리기 도착 순서수치형 - 숫자로 나타내며 데이터 속성을 그대로 지님님\n구간형 (Interval) – 선수1, 선수2 종점통과 시간\n비율형 (Ratio) – 출발시간 기준 종점 통과 시간\n구간형 (Interval) – 선수1, 선수2 종점통과 시간비율형 (Ratio) – 출발시간 기준 종점 통과 시간Data type R\nNumeric (수치형)\nDiscrete (이산형) data - 카운트, 횟수\nContinuous (연속형) data - 키, 몸무게, shared\nDate time\n\nFactors (범주형)\nCategories group data\nCharacter data - Identifiers (범주형)\n\nNumeric (수치형)\nDiscrete (이산형) data - 카운트, 횟수\nContinuous (연속형) data - 키, 몸무게, shared\nDate time\nDiscrete (이산형) data - 카운트, 횟수Continuous (연속형) data - 키, 몸무게, sharedDate timeFactors (범주형)\nCategories group data\nCharacter data - Identifiers (범주형)\nCategories group dataCharacter data - Identifiers (범주형)","code":"\nlibrary(UsingR)\nexec.pay\n?exec.pay"},{"path":"r-programming.html","id":"variables","chapter":"4 R programming","heading":"4.3.2 Variables","text":"변수는 데이터를 저장하는 공간으로 이해할 수 있습니다.Assignment operator ( <- = )\nValid object name <- value\n단축키: Alt + - (minus sign)\nValid object name <- value단축키: Alt + - (minus sign)내장 변수 Built-variables변수이름 작명법\nCharacters (letters), numbers, “_”, “.”\ndifferent symbols\nNames effectively unlimited length\nCharacters (letters), numbers, “_”, “.”different symbolsNames effectively unlimited length","code":"x <- 2\ny <- x^2 – 2*x + 1\ny\nx <- \"two\"  \nsome_data <- 9.8\npi\ni_use_snake_case <- 1\notherPeopleUseCamelCase <- 2\nsome.people.use.periods <- 3\nAnd_aFew.People_RENOUNCEconvention <- 4"},{"path":"r-programming.html","id":"object-data-structure","chapter":"4 R programming","heading":"4.4 Object (Data structure)","text":"변수, 함수 등 프로그래밍에서 사용되는 모든 개체를 말합니다.","code":""},{"path":"r-programming.html","id":"vector","chapter":"4 R programming","heading":"4.4.1 vector","text":"vector는 R의 기본 데이터 구조입니다. numeric vector, logical vector, character vector 등 저장되는 값의 타입에 따라 크게 세가지로 나눌 수 있습니다. class() 함수를 이용해서 값의 타입을 알아낼 수 있습니다. Combine function인 c()를 활용하여 만들며 값을 순차적으로 붙여갈 수 있습니다. 다음과 같은 Univariate (단변량, Single variable)을 표현할 때 사용됩니다.\\[ x_1, x_2, ..., x_n \\]","code":"\nx <- c(10.4, 5.6, 3.1, 6.4, 21.7) \nclass(x)\ny <- c(\"X1\", \"Y2\",  \"X3\",  \"Y4\")\nclass(y)\nz <- c(T, F, F, T)\nclass(z)"},{"path":"r-programming.html","id":"numeric","chapter":"4 R programming","heading":"4.4.1.1 numeric","text":"numeric 형식의 벡터는 다음과 같은 다양한 편의 함수들을 사용해서 만들수 있습니다.Exercisesodds라는 이름의 변수에 1부터 100까지의 홀수만을 저장하시오 (seq() 함수 사용)인덱싱은 배열형 (vector, matrix 등) 데이터의 일부 데이터를 참조할 때 사용하는 방법입니다. [와 ]를 사용하며 위치를 나타내는 수로 참조합니다.또한 해당 위치의 이름으로 참조하기도 합니다.참고로 vector 들은 다음과 같은 builtin 함수들을 사용해서 해당 변수의 attribute를 알아낼 수 있습니다. attribute에는 원소 이름, 타입, 길이 등 vector형 변수가 가질 수 있는 특성을 말합니다.","code":"\n1:5\nseq(1,5, by=1)\nseq(0, 100, by=10)\nseq(0, 100, length.out=11)\n?seq\n\nrep(5, times=10)\nrep(1:3, times=4)\nrep(1:3, each=3)\nx[1]\nx[1:3]\ni <- 1:3\nx[i]\nx[c(1,2,4)]\ny[3]\nhead(precip)\nprecip[1]\nprecip[2:10]\nprecip[c(1,3,5)]\nprecip[-1]\nprecip[\"Seattle Tacoma\"]\nprecip[c(\"Seattle Tacoma\", \"Portland\")]\nprecip[2] <- 10\nhead(precip)\nclass(precip)\nlength(precip)\nnames(precip)\n\ntest_scores <- c(100, 90, 80)\nnames(test_scores) <- c(\"Alice\", \"Bob\", \"Shirley\")\ntest_scores"},{"path":"r-programming.html","id":"logical","chapter":"4 R programming","heading":"4.4.1.2 logical","text":"Logical 벡터는 True 또는 False를 원소로 갖는 벡터 입니다. 앞글자가 대분자로 시작하는 것을 기억하시고 T 또는 F와 같이 한 문자로 표현할 수도 있습니다. 특정 조건에 대한 판단 결과를 반환할 경우에도 논리값을 사용합니다. 이 경우 조건을 판단 후 인덱싱 방법으로 (, , 등 사용) 해당 값들을 뽑아내기도 합니다. 또한 활용이 많은 sample 함수의 사용법을 익혀둡니다.Exercises\n1. 1부터 100까지의 수를 evens이라는 이름의 변수에 저장하고 이 중 짝수만을 뽑아내서 출력하시오 (()함수 사용)sample 함수를 사용하여 앞서 odds와 evens 변수에서 랜덤하게 1개씩의 샘플을 뽑아서 mynumbers에 저장하시오sample 함수를 사용하여 앞서 odds와 evens 변수에서 랜덤하게 1개씩의 샘플을 뽑아서 mynumbers에 저장하시오어떤 짝수가 뽑혔는지 찾아서 출력하시오 (which와 인덱싱 사용)어떤 짝수가 뽑혔는지 찾아서 출력하시오 (which와 인덱싱 사용)","code":"\nx <- 1:20\nx > 13\ntemp <- x > 13\nclass(temp)\n\nages <- c(66, 57, 60, 41,  6, 85, 48, 34, 61, 12)\nages < 30\nwhich(ages < 30)\ni <- which(ages < 30)\nages[i]\nany(ages < 30)\nall(ages < 30)\n\nrandom_number <- sample(c(1:10), 2)"},{"path":"r-programming.html","id":"character","chapter":"4 R programming","heading":"4.4.1.3 character","text":"Character(문자형) 벡터의 경우 문자열을 다루는데 자주 쓰이는 paste() 함수의 사용법을 알아두면 편리합니다. paste() 함수는 서로 다른 문자열을 붙이는데 주로 사용됩니다. 참고로 문자열을 나누는 함수는 strsplit() 입니다. paste()에서 붙이는 문자 사이에 들어가는 문자를 지정하는 파라메터는 sep 이고 strsplit()함수에서 자르는 기준이 되는 문자는split 파라미터로 지정해 줍니다 (?split 또는 ?paste 확인).Exercisesm이라는 변수에 “Capital South Korea Seoul” 문자열을 저장하고 “Capital South Korea”를 따로 뽑아내 m2에 저장하시오 (substr() 사용)m이라는 변수에 “Capital South Korea Seoul” 문자열을 저장하고 “Capital South Korea”를 따로 뽑아내 m2에 저장하시오 (substr() 사용)LETTERS 내장함수에서 랜덤하게 10개의 문자를 뽑아내 myletters 변수에 저장하고 이들을 연결하여 (paste 사용) 하나의 문장(String)을 만드시오LETTERS 내장함수에서 랜덤하게 10개의 문자를 뽑아내 myletters 변수에 저장하고 이들을 연결하여 (paste 사용) 하나의 문장(String)을 만드시오myletters 변수의 문자들을 알파벳 순서대로 정렬하고 (sort 사용) 이들을 연결하여 하나의 문장 (String)을 만드시오myletters 변수의 문자들을 알파벳 순서대로 정렬하고 (sort 사용) 이들을 연결하여 하나의 문장 (String)을 만드시오","code":"\npaste(\"X\", \"Y\", \"Z\", sep=\"_\")\npaste(c(\"Four\",\"The\"), c(\"Score\",\"quick\"), c(\"and\",\"fox\"), sep=\"_\")\npaste(\"X\", 1:5, sep=\"\")\npaste(c(\"X\",\"Y\"), 1:10, sep=\"\")\n\nx <- c(\"X1\", \"Y2\", \"X3\", \"Y4\", \"X5\")\npaste(x[1], x[2])\npaste(x[1], x[2], sep=\"\")\npaste(x, collapse=\"_\")\n\nstrsplit(\"XYZ\", split=\"\")\nsort(c(\"B\", \"C\", \"A\", \"D\"))"},{"path":"r-programming.html","id":"factor","chapter":"4 R programming","heading":"4.4.1.4 factor","text":"Factor형은 범주형데이터를 저장하기 위한 object 이며 R 언어에서 특별히 만들어져 사용되고 있습니다. factor() 함수를 이용해 생성하며 생성된 객체는 다음과 같이 level이라는 범주를 나타내는 특성값을 가지고 있습니다.예를 들어 어린이 5명이 각각 빨강, 파랑, 노랑, 빨강, 파랑 색종이를 들고 있을때 색의 종류를 나타내는 값들은 빨강, 파랑, 노랑 입니다. 다섯 명의 아이들이 어떤 색의 색종이를 들고 있는지와는 상관없이 세 가지 범주의 값을 가지는 것 입니다.새로운 범주의 데이터를 추가할 경우 다음과 같이 해당되는 level을 먼저 추가하고 값을 저장해야 합니다.factor는 기본적으로 level에 표시된 순서가 위치 (정렬) 순서입니다. 이를 바꾸기 위해서는 다음과 같이 levels 함수를 이용해서 순서를 바꿀 수 있습니다.Exercises","code":"\nx <- c(\"Red\", \"Blue\", \"Yellow\", \"Red\", \"Blue\")\ny <- factor(x)\ny\nlevels(y)\ny[1] <- \"Gold\"\ny\n\nlevels(y) <- c(levels(y), \"Gold\")\nlevels(y)\ny\ny[1] <- \"Gold\"\ny\nlibrary(MASS)\nstr(Cars93)\nx <- Cars93$Origin\nplot(x)\nlevels(x) <- c(\"non-USA\", \"USA\")\nlevels(x)\nplot(x)"},{"path":"r-programming.html","id":"missing-values","chapter":"4 R programming","heading":"4.4.1.5 Missing values","text":"특정 값이 “available” 이거나 “Missing value” 일 경우 벡터의 해당 원소 자리에 데이터의 이상을 알리기 위해 NA를 사용합니다. 따라서 일반적인 연산에서 NA가 포함되어 있는 경우 데이터의 불완전성을 알리기 위해 연산의 결과는 NA가 됩니다. .na() 함수는 해당 변수에 NA 값이 있는지를 검사해주는 함수이며 R에는 이 외에도 다음과 같은 특수 값들이 사용되고 있습니다.NA: available, value missingNULL: reserved valueNaN: number (0/0)Inf: (1/0)","code":"\nhip_cost <- c(10500, 45000, 74100, NA, 83500)\nsum(hip_cost)\nsum(hip_cost, na.rm=TRUE)\n?sum"},{"path":"r-programming.html","id":"useful-functions","chapter":"4 R programming","heading":"4.4.1.6 Useful functions","text":"다음은 벡터형 변수와 같이 쓰이는 유용한 함수들입니다.함수를 사용하여 데이터 타입이 사용자가 의도한 타입과 맞는지 검사할 수 있습니다. 콘솔창에서 .를 타이핑한 후 잠시 기다리면 다양한 합수를 볼 수 있습니다.함수는 데이터 타입을 변환해주는 함수입니다.","code":"\nz <- sample(1:10, 100, T)\nhead(z)\nsort(z)\norder(z)\ntable(z)\np <- z/sum(z)\nround(p, digits=1)\nis.na(1)\nis.numeric(1)\nis.logical(TRUE)\nis.data.frame(\"A\")\nis.character(\"A\")\ndigits <- runif(10)*10\nclass(digits)\ndigits_int <- as.integer(digits)\nclass(digits_int)\ndigits_char <- as.character(digits_int)\nclass(digits_char)\ndigits_num <- as.numeric(digits_char)\nclass(digits_num)"},{"path":"r-programming.html","id":"matrix","chapter":"4 R programming","heading":"4.4.2 matrix","text":"매트릭스는 2차원 행렬로 같은 형식의 데이터 값 (numberic, character, logical) 으로만 채워진 행렬을 말합니다. 메트릭스를 만드는 방법은 아래와 같으며 nrow 와 ncol 파라메터에 행과 열의 수를 넣고 각 셀에 들어갈 값은 가장 앞에 위치한 data 파라메터에 넣어 줍니다 (?matrix로 파라메터 이름 확인). 메트릭스 인덱싱은 메트릭스 안의 값을 저장하거나 참조할때 (빼올때) 사용하는 방법입니다. 메트릭스 변수이름 바로 뒤에 대괄호를 이용해서 제어를 하며 대괄호 안에 콤마로 구분된 앞쪽은 row, 뒷쪽은 column 인덱스를 나타냅니다.매트릭스의 row나 column에 이름이 주어져 있을 경우 이름을 따옴표(“)로 묶은 후 참조가 가능합니다. row나 column의 이름은 rownames() 또는 colnames()로 생성하거나 변경할 수 있습니다. row나 column의 개수는 nrow() 또는 ncol() 함수를 사용합니다.여러 row나 column을 참조할 경우 아래와 같이 combine 함수를 사용하여 묶어줘야 하며 스칼라값을 (임의의 숫자 하나) 더하거나 뺄 경우 vector / matrix 연산을 기본으로 수행합니다.Exercisesscore 라는 변수에 1부터 100까지 중 랜덤하게 선택된 20개의 수로 10 x 2 matrix를 만드시오 (sample() 사용)score의 row 이름을 문자형으로 Name1, Name2, …, Name10으로 지정하시오 (paste() 사용)score의 column 이름을 문자형으로 math와 eng로 지정하시오이 matrix의 첫번째 컬럼과 두 번째 컬럼의 수를 각각 더한 후 total_score라는 변수에 저장하시오total_score의의 오름차순 순서를 나타내는 인덱스 (order()함수 사용)를 o라는 변수에 저장하시오score를 o순서로 재배치하고 score_ordered 변수에 저장하시오","code":"\nmymat <- matrix(0, nrow=100, ncol=3) # 1\nmymat[,1] <- 1:100 # 2\nmymat[,2] <- seq(1,200,2) # 3\nmymat[,3] <- seq(2,200,2) # 4\ncolnames(mymat)\ncolnames(mymat) <- c(\"A\", \"B\", \"C\")\ncolnames(mymat)\ncolnames(mymat)[2] <- \"D\"\ncolnames(mymat)\nrownames(mymat) <- paste(\"No\", 1:nrow(mymat), sep=\"\")\nrownames(mymat)\nmymat[c(2,3,4,5),2] # 5\nmymat-1 # 6\nmysub <- mymat[,2] - mymat[,1] #7\nsum(mysub) #8\nsum(mysub^2) #8"},{"path":"r-programming.html","id":"data.frame","chapter":"4 R programming","heading":"4.4.3 data.frame","text":"데이터프레임은 형태는 매트릭스와 같으나 컬럼 하나가 하나의 vector형 변수로서 각 변수들이 다른 모드의 값을 저장할 수 있다는 차이가 있습니다. $ 기호를 이용하여 각 구성 변수를 참조할 수 있습니다. 컬럼 한 줄이 하나의 변수 이므로 새로운 변수도 컬럼 형태로 붙여 넣을 수 있습니다. 즉, 각 row는 샘플을 나타내고 각 column은 변수를 나타내며 각 변수들이 갖는 샘플의 개수 (row의 길이, vector 의 길이)는 같아야 합니다. R 기반의 데이터 분석에서는 가장 선호되는 데이터 타입이라고 볼 수 있습니다.데이터프레임에서는 $를 사용하여 변수 이름으로 인덱싱이 가능합니다.Exercisesmath라는 변수에 1부터 100까지 중 랜덤하게 선택된 10개의 수를 넣으시오eng라는 변수에 1부터 100까지 중 랜덤하게 선택된 10개의 수를 넣으시오students라는 변수에 문자형으로 Name1, Name2, …, Name10으로 지정하시오 (paste() 사용)math와 eng라는 벡터에 저장된 값들의 이름을 students 변수에 저장된 이름으로 지정하시오math와 eng 벡터를 갖는 score 라는 data.frame을 만드시오math와 eng 변수를 지우시오 (rm()사용)score data frame의 math와 eng를 각각 더한 후 total_score라는 변수에 저장 하시오","code":"\n## data.frame\nids <- 1:10\nids\nidnames <- paste(\"Name\", ids, sep=\"\")\nidnames\nstudents <- data.frame(ids, idnames)\nstudents\nclass(students$ids)\nclass(students$idnames)\nstudents$idnames\nstr(students)\n\nstudents <- data.frame(ids, idnames, stringsAsFactors = F)\nclass(students$idnames)\nstudents$idnames\nstudents[1,]\nstr(students)\n## data frame indexing \nstudents$ids\nstudents[,1]\nstudents[,\"ids\"]"},{"path":"r-programming.html","id":"list","chapter":"4 R programming","heading":"4.4.4 list","text":"리스트는 변수들의 모임이라는 점에서 데이터프레임과 같으나 구성 변수들의 길이가 모두 같아야 하는 데이터프레임과는 달리 다른 길이의 변수를 모아둘 수 있는 점이 다릅니다. 즉, R언어에서 두 변수를 담을 수 있는 데이터 타입은 list와 data frame 두 종류가 있는데 list 변수 타입은 vector 형태의 여러개의 element를 가질 수 있으며 각 vector의 길이가 모두 달라도 됩니다. list의 인덱싱에서 [ ]는 리스트를 반환하고 [[ ]]는 vector element들을 반환합니다.Exercises위 아미노산 예제에서 Phe, Leu, Ser 각각의 코돈을 원소로 갖는 세 개의 vector 변수들을 만들고 이를 aalist 라는 이름의 하나의 리스트 변수로 만드시오위 아미노산 예제에서 Phe, Leu, Ser 각각의 코돈을 원소로 갖는 세 개의 vector 변수들을 만들고 이를 aalist 라는 이름의 하나의 리스트 변수로 만드시오aalist 리스트를 data.frame 형식의 aadf 변수로 만드시오 (데이터 구조를 바꾸어 저장 가능)aalist 리스트를 data.frame 형식의 aadf 변수로 만드시오 (데이터 구조를 바꾸어 저장 가능)","code":"\n## list\nparent_names <- c(\"Fred\", \"Mary\")\nnumber_of_children <- 2\nchild_ages <- c(4, 7, 9)\ndata.frame(parent_names, number_of_children, child_ages)\nlst <- list(parent_names, number_of_children, child_ages)\nlst[1]\nlst[[1]]\nclass(lst[1])\nclass(lst[[1]])\nlst[[1]][1]\nlst[[1]][c(1,2)]"},{"path":"r-programming.html","id":"functions","chapter":"4 R programming","heading":"4.5 Functions","text":"함수(Function)란 사용자가 원하는 기능을 수행하는 코드의 모음으로서 반복적으로 쉽게 사용할 수 있도록 만들어 놓은 코드 입니다.","code":""},{"path":"r-programming.html","id":"a-script-in-r","chapter":"4 R programming","heading":"4.5.1 A script in R","text":"함수의 개념을 배우기 전에 스크립트를 활용한 명령어 수행을 알아보겠습니다. R 프로그래밍을 통해서 사용자가 원하는 기능을 수행하는 방법은 다음과 같이 스크립트를 만들어서 실행하는 것 입니다. 일반적으로 R을 이용한 스크립트 명령을 어떻게 실행하는지 알아보겠습니다. 다음 예제는 입력 값들의 평균을 계산해서 출력해 주는 스크립트 명령입니다. R base 패키지에서 기본으로 제공되는 mean()이라는 함수가 있지만 사용하지 않고 sum()과 length() 함수를 사용했습니다.상황에 따라 다르긴 하지만 보통 위 스크립트를 실행할 때 R 파일을 하나 만들고 source()라는 함수를 사용해서 파일 전체를 한번에 읽어들이고 실행을 시킵니다. 위 코드를 myscript.R 이라는 새로운 R 파일을 하나 만들고 저장 후 다음과 같이 실행할 수 있습니다. 참고로 위 파일은 현재 Working directory와 같은 위치에 저장해야 합니다.그러나 위와 같은 식으로 실행할 경우 다음 몇 가지 문제가 있습니다. 하나는 입력 값이 바뀔 때마나 파일을 열어 바뀐 값을 저장해 줄 필요가 있습니다. 결과 값에 대해서 다른 처리를 하고 싶을 경우 또한 파일을 직접 수정해 주어야 합니다. 또한 모든 변수들이 전역변수로 사용되어 코드가 복잡해질 경우 변수간 간섭이 생길 가능성이 높습니다.","code":"\n\nnumbers <- c(0.452, 1.474, 0.22, 0.545, 1.205, 3.55)\ncat(\"Input numbers are\", numbers, \"\\n\")\nnumbers_mean <- sum(numbers)/length(numbers)\nout <- paste(\"The average is \", numbers_mean, \".\\n\", sep=\"\")\ncat(out)\nsource(\"myscript.R\")"},{"path":"r-programming.html","id":"build-a-function","chapter":"4 R programming","heading":"4.5.2 Build a function","text":"함수는 특정 데이터를 입력으로 받아 원하는 기능을 수행한 후 결과 데이터를 반환하는 구조를 가집니다. 함수는 일반적으로 다음과 같은 포멧으로 구현할 수 있습니다.예를 들어 다음과 같은 my_sine 함수를 만들 수 있으며 parameter (매개변수)는 x이고 y는 반환값을 저장하는 지역변수 입니다.만들어진 함수는 다음과 같이 사용할 수 있습니다. 만들어진 함수는 처음에 한 번 실행해 주어 실행중인 R session에 등록한 후 사용할 수 있습니다. 여기서 함수로 전달되는 값 pi는 argument (전달인자) 라고 합니다. 전달인자는 함수에서 정의된 매개변수의 갯수와 같은 수의 전달인자를 입력해 주어야 합니다. 참고로 parameter와 argument는 많은 사람들이 혼동하는 단어입니다. 본 예에서 my_sine함수의 괄호 안에 있는 변수 x는 parameter이고 x에 들어가는 값인 pi 나 90은 argument 입니다.Terminology\nfunction name: my_sine\nparameter: x\nargument: pi\nreturn value: y\nTerminologyfunction name: my_sineparameter: xargument: pireturn value: y이제 위 스크립트 (myscript.R) 에서 사용된 코드를 함수로 바꿔봅니다. numbers (전달인자)를 받는 매개변수를 x로 하고 함수 이름은 mymean 이고 평균값 (numbers_mean)을 반환하는 합수입니다.myscript.R이라는 파일을 열고 작성된 스크립트에 더해서 아래처럼 함수 코드를 만들 경우 source() 함수로 함수를 세션으로 읽어오고 바로 사용할 수 있습니다. 위와 같이 함수를 만들 경우 입력 값을 언제든 바꿔서 사용할 수 있고 반환값에 대한 추가적인 연산도 쉽게 수행 할 수 있습니다.Exercises변수 x에 1, 3, 5, 7, 9를, 변수 y에 2, 4, 6, 8, 10을 저장하는 코드를 작성하시오변수 x에 1, 3, 5, 7, 9를, 변수 y에 2, 4, 6, 8, 10을 저장하는 코드를 작성하시오x와 y를 더한 값을 z에 저장하는 코드를 작성하시오x와 y를 더한 값을 z에 저장하는 코드를 작성하시오mysum 이라는 이름의 함수를 작성하되 두 변수를 입력으로 받아 더한 후 결과를 반환하는 코드를 작성하시오mysum 이라는 이름의 함수를 작성하되 두 변수를 입력으로 받아 더한 후 결과를 반환하는 코드를 작성하시오mymean 이라는 이름의 함수를 작성하되 두 변수를 입력으로 받아 평균을 구한 후 결과를 반환하는 코드를 작성하시오mymean 이라는 이름의 함수를 작성하되 두 변수를 입력으로 받아 평균을 구한 후 결과를 반환하는 코드를 작성하시오Exercisesmysd라는 이름의 (표본)표준편차를 구하는 함수를 myscript.R 파일에 구현하시오 (sd()함수 사용하지 않고, 다음 표준편차 공식 이용)\\[\n\\sigma = \\sqrt{\\frac{\\sum(x-mean(x))^2}{length(x)-1}}\n\\]코드는 아래와 같음1부터 100까지의 값을 x에 저장하고 mysd 함수를 사용해서 표준편차를 구하시오1부터 100까지의 값을 x에 저장하고 mysd 함수를 사용해서 표준편차를 구하시오앞서 작성한 mymean 함수와 mysd 함수를 같이 사용하여 x를 표준화 하고 z로 저장하시오. 표준화 공식은 다음과 같음앞서 작성한 mymean 함수와 mysd 함수를 같이 사용하여 x를 표준화 하고 z로 저장하시오. 표준화 공식은 다음과 같음\\[\nz = \\frac{x - mean(x)}{sd(x)}\n\\]x 와 z 변수를 원소로 갖는 y라는 이름의 data.frame을 생성하시오","code":"\nmy_function_name <- function(parameter1, parameter2, ... ){\n  ##any statements\n  return(object)\n}\nmy_sine <- function(x){\n    y <- sin(x)\n    return(y)\n}\nmy_sine(pi)\nmy_sine(90)\nsin(90)\nnumbers <- c(0.452, 1.474, 0.22, 0.545, 1.205, 3.55)\n\nmymean <- function(x){\n  cat(\"Input numbers are\", x, \"\\n\")\n  numbers_mean <- sum(x)/length(x)\n  out <- paste(\"The average is \", numbers_mean, \".\\n\", sep=\"\")\n  cat(out)\n  return(numbers_mean)\n}\n\nretval <- mymean(numbers)\ncat(retval)\nnew_values <- c(1:10)\nretval <- mymean(new_values)\nretval\nmysd <- function(x){\n  numbers_sd <- sqrt(sum((x - mymean(x))^2)/(length(x)-1))  \n  return(numbers_sd)\n}"},{"path":"r-programming.html","id":"local-and-global-variables","chapter":"4 R programming","heading":"4.5.3 local and global variables","text":"함수를 사용함에 따라서 함수 안에서 사용되는 변수와 함수 밖에서 사용되는 변수들의 경우를 명확히 이해할 필요가 있습니다. 다음 코드를 보면 전역변수 x, y는 지역변수 x, y와 독립적으로 사용되고 있습니다.log, sin등의 함수들은 Built-function으로 같은 이름의 함수를 만들지 않도록 주의합니다.","code":"\nmy_half <- function(x){\n  y <- x/z\n  cat(\"local variable x:\", x, \"\\n\")\n  cat(\"local variable y:\", y, \"\\n\")\n  cat(\"global variable z:\", z, \"\\n\")\n  return(y)\n}\ny <- 100\nx <- 20\nz <- 30\ncat(\"Global variable x:\", x, \"\\n\")\ncat(\"Global variable y:\", y, \"\\n\")\ncat(\"Global variable z:\", z, \"\\n\")\nmy_half(5)\n\nmy_half <- function(x, z){\n  y <- x/z\n  cat(\"local variable x:\", x, \"\\n\")\n  cat(\"local variable y:\", y, \"\\n\")\n  cat(\"local variable z:\", z, \"\\n\")\n  return(y)\n}\n\nmy_half(5, 10)\nx <- pi\nsin(x)\nsqrt(x)\nlog(x)\nlog(x, 10)\nx <- c(10, 20, 30)\nx + x\nmean(x)\nsum(x)/length(x)"},{"path":"r-programming.html","id":"vectorized-functions","chapter":"4 R programming","heading":"4.5.4 Vectorized functions","text":"초기에 R이 다른 프로그래밍 언어에 비해서 경쟁력을 갖는 이유 중 하나가 바로 이 벡터 연산 기능 이였습니다. vector 변수에 들어있는 각 원소들에 대해서 특정 함수나 연산을 적용하고 싶을 경우 전통 방식의 C나 Java등의 언어에서는 원소의 개수만큼 반복문을 돌면서 원하는 작업을 수행 했습니다. 그러나 R의 벡터 연산 기능은 별도의 반복문 없이 vector 안에 있는 원소들에 대한 함수 실행 또는 연산을 수행할 수 있습니다.Exercises다음은 한 다이어트 프로그램의 수행 전 후의 다섯 명의 몸무게이다.각각을 와 이름의 변수에 저장 후 몸무게 값의 변화량을 계산하여 diff 라는 변수에 저장하시오각각을 와 이름의 변수에 저장 후 몸무게 값의 변화량을 계산하여 diff 라는 변수에 저장하시오diff에 저장된 값들의 합, 평균, 표준편차를 구하시오diff에 저장된 값들의 합, 평균, 표준편차를 구하시오Exercises다음 네 학생이 있으며 “John”,“James”,“Sara”, “Lilly” 각 나이는 21, 55, 23, 53 이다. ages 라는 변수를 생성하고 각 나이를 저장한 후 who라는 이름의 함수를 만들어서 50살 이상인 사람의 이름을 출력하는 함수를 만드시오.ages라는 변수에 나이 저장, c() 함수 이용, vector 형태 저장names() 함수 이용해서 각 ages 벡터의 각 요소에 이름 붙이기which() 함수 사용해서 나이가 50보다 큰 인덱스 찾고 해당 인덱스 값들을 idx에 저장ages에서 idx에 해당하는 인덱스를 갖는 값을 sel_ages에 저장names()함수를 이용해서 sel_ages의 이름을 sel_names에 저장위 설명을 참고해서 input이라는 파라메터를 갖고 sel_names라는 50살 이상인 사람의 이름을 반환하는 who50이라는 이름의 함수 만들기who50 함수의 사용법은 who50(ages) 임","code":"\nx <- c(10, 20, 30)\nx + x\nsqrt(x)\nsin(x)\nlog(x)\nx-mean(x)\n\nlength(x)\ntest_scores <- c(Alice = 87, Bob = 72, James= 99)\nnames(test_scores)"},{"path":"r-programming.html","id":"flow-control","chapter":"4 R programming","heading":"4.6 Flow control","text":"","code":""},{"path":"r-programming.html","id":"if-statements","chapter":"4 R programming","heading":"4.6.1 if statements","text":"R에서의 제어문의 사용은 다른 프로그래밍 언어와 거의 유사합니다. 먼저 는 다음과 같은 형식으로 사용되며 () 안에 특정 조건 판단을 위한 표현이 들어갑니다.특히 condition은 하나의 원소에 대한 조건 판단문으로 T 또는 F 값 하나만을 반환하는 문장이어야 합니다. 위 코드는 만약 condition 조건이 True 이면 expr_1를 실행하고 False이면 expr_2를 실행하라는 명령입니다. condition 안에서 사용되는 비교 연산자들은 다음과 같습니다.","code":"\nif(condition){\n  expr_1\n}else{\n  expr_2\n}x <- 2\nif(x%%2 == 1){\n  cat(\"Odd\")\n}else{\n  cat(\"Even\")\n} \n\nx <- 5\nif(x > 0 & x < 4){\n  print(\"Positive number less than four\")\n}\n\nif(x > 0) print(\"Positive number\")\n\nx <- -5\nif(x > 0){\n  print(\"Non-negative number\")\n} else if(x <= 0 & x > -5){\n  print(\"Negative number greater than -5\")\n} else {\n  print(\"Negative number less than -5\")\n}\n\nif(x > 0)\n  print(\"Non-negative number\")\nelse\n  print(\"Negative number\")"},{"path":"r-programming.html","id":"ifelse-statements","chapter":"4 R programming","heading":"4.6.2 ifelse statements","text":"if는 하나의 조건만 비교하는데 사용할 수 있습니다. 그러나 변수에는 여러 값이 벡터형식으로 들어가고 벡터연산을 수행할 경우의 결과도 벡터형식으로 나오지만 if문은 이들을 한 번에 처리하기 어렵습니다. ifelse는 이러한 단점을 보완하여 여러 값을 한번에 처리할 수 있습니다.ifelse의 경우 빠르게 원하는 값을 반환할 수 있으나 조건별로 다른 추가적인 명령의 수행은 불가능하다는 단점이 있습니다.Exercises다음은 median (중간값)을 구하는 공식이며 x의 길이가 (n이) 홀수일 경우와 짝수일 경우에 따라서 다른 공식이 사용된다. 다음 공식과 코드를 이용하여 mymedian 이라는 이름의 함수를 만들고 입력 값들의 중간값을 구해서 반환하는 함수를 만드시오. (%% 나머지 연산, if문 사용, 아래 중간값 코드 참고)\\[\nmedian(X) =\n\\begin{cases}\n\\frac{1}{2} X[\\frac{n}{2}] + \\frac{1}{2} X[1+\\frac{n}{2}] & \\mbox{} n \\mbox{ even} \\\\\nX[\\frac{n+1}{2}] & \\mbox{} n \\mbox{ odd}\n\\end{cases}\n\\]","code":"ifelse (condition, True일 때 리턴값, False일 때 리턴값)\n\nx <- c(1:10)\nif(x>10){\n  cat(\"Big\")\n}else{\n  cat(\"Small\")\n}\n\nifelse(x>10, \"Big\", \"Small\")\nsorted_x <- sort(x)\n# 만약 짝수이면 \nretval <- sort_x[n/2]/2 + sort_x[1+(n/2)]/2\n# 만약 홀수이면 \nretval <- sort_x[(n+1)/2]"},{"path":"r-programming.html","id":"for-while-repeat","chapter":"4 R programming","heading":"4.6.3 for, while, repeat","text":"문은 반복적으로 특정 코드를 실행하고자 할 때 사용됩니다. 다음과 같은 형식으로 사용할 수 있습니다.var는 반복을 돌 때마다 바뀌는 변수로 {} 안에서 사용되는 지역 변수 입니다. seq는 vector 형식의 변수로 반복을 돌 때마다 순차적으로 var에 저장되는 값들 입니다.while문도 for문과 같이 반복적으로 특정 코드를 수행하고자 할 때 사용합니다. 사용하는 문법은 다음과 같으며 cond는 True 또는 False 로 반환되는 조건문을 넣고 True 일 경우 계속해서 반복하면서 expressions를 수행하며 이 반복은 cond가 False로 될 때 까지 계속됩니다.while문을 사용할 경우 다음과 같이 indicator라 불리우는 변수를 하나 정해서 반복 할 때마다 값이 바뀌도록 해 주어야 합니다. 그렇지 않으면 무한 루프를 돌게 되는 문제가 발생합니다.repeat 명령은 조건 없이 블럭 안에 있는 코드를 무조건 반복하라는 명령 입니다. 따라서 블럭 중간에 멈추기 위한 코드가 필요하고 이 명령이 break 입니다.","code":"\nfor(var in seq){\n  expression\n}\nx <- 1:10\nfor(i in x){\n  cat(i, \"\\n\")\n  flush.console()\n}\n\nsum_of_i <- 0\nfor(i in 1:10){\n  sum_of_i <- sum_of_i + i\n  cat(i, \" \", sum_of_i, \"\\n\");flush.console()\n}\nwhile(cond){\n  expression\n}\ni <- 10\nf <- 1\nwhile(i>1){\n  f <- i*f\n  i <- i-1\n  cat(i, f, \"\\n\")\n}\nf\nfactorial(10)\nrepeat{\n  expressions\n  if(cond) break\n}\n\ni <- 10\nf <- 1\nrepeat {\n  f <- i*f\n  i <- i-1\n  cat(i, f, \"\\n\")\n  if(i<1) break\n}\nf\nfactorial(10)"},{"path":"r-programming.html","id":"avoiding-loops","chapter":"4 R programming","heading":"4.6.4 Avoiding Loops","text":"R에서는 가능하면 loop문을 사용하지 않는 것이 좋습니다. 이는 다른 언어들 보다 반복문이 느리게 수행된다는 이유 때문이기도 합니다. 그러나 R에서는 반복문을 수행하는 것 보다 훨씬 더 빠르게 반복문을 수행 한 것과 같은 결과를 얻을 수 있는 다양한 방법들이 제공되고 있습니다. 차차 그런 기법들에 대한 학습을 진행하도록 하겠습니다.Exercises다음 네 사람의 이름과 나이를 데이터로 갖는 users 변수를 (data.frame) 만드시오각 사람의 점수가 80보다 작으면 이름 점수: Fail 크면 이름 점수: Pass를 출력을 하는 코드를 작성하시오. 예를 들어 John의 점수는 80보다 크므로 John 90: Pass 출력 (, print 함수 이용)","code":"\nx <- 1:1E7\nsum(x)\nsystem.time(sum(x))\n\nst <- proc.time()\ntotal <- 0\nfor(i in 1:length(x)){\n  total <- total + x[i]\n}\ned <- proc.time()\ned-st\nuser_score <- c(90, 95, 88, 70)\nuser_names <- c(\"John\",\"James\",\"Sara\", \"Lilly\")"},{"path":"r-programming.html","id":"object-oriented-programming-advanced","chapter":"4 R programming","heading":"4.7 Object Oriented Programming (Advanced)","text":"OOP는 객체지향 프로그래밍 이라고 합니다. OOP를 이용해서 프로그래밍으로 풀고자 하는 문제를 좀 더 명확하게 개념을 수립하고 복잡한 코드를 명료하게 만들 수 있습니다. 그런데 R에서 OOP는 다른 언어보다는 좀 더 어려운 개념적인 이해가 필요합니다. S3, S4, 그리고 Reference class 가 있으며 S3, S4는 Generic function을 이용하며 다른 언어에서 사용하는 OOP 개념과는 다릅니다. Reference class는 다른 언어에서 사용하는 OOP 개념과 유사하며 R6 패키지를 이용해서 사용할 수 있습니다.이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다.","code":""},{"path":"data-transformation.html","id":"data-transformation","chapter":"5 Data transformation","heading":"5 Data transformation","text":"일반적인 데이터 분석은 데이터 전처리(변환), 가시화, 모델링(통계분석)의 반복적인 수행으로 진행될 수 있습니다. R에서는 data.frame 형식의 데이터 타입이 주로 사용되며 (최근 tibble형식) 따라서 data.frame 기반의 데이터를 다루기 위한 다양한 함수를 익힐 필요가 있습니다. 이번 강의에서는 data.frame 데이터를 읽거나 쓰는 함수들과 함께 데이터 전처리를 (변환) 위한 함수들을 배워보겠습니다.앞에서 배웠던 데이터를 저장하는 object의 종류를 먼저 간략히 정리해 봅니다.Vectors - 같은 타입의 데이터를 (Numeric, character, factor, …) 저장한 오브젝트로 인덱스는 [, ] 사용.Lists - 여러개의 vector를 원소로 가질 수 있으며 각 원소 vector들은 문자나 숫자 어떤 데이터 타입도 가능하고 길이가 달라도 됨. list의 인덱싱에서 [ ]는 리스트를 반환하고 [[ ]]는 vector를 반환함.Matrices - 같은 타입의 데이터로 채워진 2차원 행렬이며 인덱스는 [, j] 형태로 i는 row, j는 column 을 나타냄. 메트릭스의 생성은 matrix 명령어를 사용하며 왼쪽부터 column 값을 모두 채우고 다음 컬럼 값을 채워 나가는 것이 기본 설정임. byrow=T 를 통해 row를 먼저 채울수도 있음. row와 column 이름은 rownames와 colnames로 설정이 가능하며 rbind와 cbind로 두 행렬 또는 행렬과 백터를 연결할 수 있음 ( rbind와 cbind의 경우 행렬이 커지면 컴퓨터 리소스 많이 사용함)data.frame - list와 matrix의 특성을 모두 갖는 오브젝트 타입으로 list와 같이 다른 타입의 vector형 변수 여러개가 컬럼에 붙어서 matrix 형태로 구성됨. 단, list와는 다르게 각 변수의 길이가 (row의 길이) 같아야 함. $ 기호로 각 변수들을 인덱싱(접근) 할 수 있고 matrix와 같이 [,j] 형태의 인덱싱도 가능.","code":""},{"path":"data-transformation.html","id":"reading-and-writing","chapter":"5 Data transformation","heading":"5.1 Reading and writing","text":"파일에 있는 데이터를 R로 읽어들이거나 쓰는 일은 일반적인 데이터 분석 과정에서 필수적일 수 있습니다. 본 강의에서는 일반적으로 사용하는 텍스트 파일과 엑셀파일을 활용하는 방법을 알아보겠습니다.","code":""},{"path":"data-transformation.html","id":"text-file","chapter":"5 Data transformation","heading":"5.1.1 Text file","text":"편의상 데이터를 쓰는 과정을 먼저 살펴봅니다. UsingR 예제에 있는 데이터 중 batting 데이터는 2002 야구시즌에 선수들의 정보를 모아둔 데이터 입니다. str 함수로 데이터 전체적인 구조를 파악한 일부 데이터만을 (홈런 개수와 스트라이크 아웃) 이용해 추가적인 데이터를 생성한 후 별도로 파일에 저장해 보겠습니다.재미삼아 홈런과 삼진아웃간의 관계를 한 번 알아보겠습니다.위 데이터를 파일로 저정하기 위해서는 write.table 또는 write.csv 함수를 사용할 수 있습니다. 패키지에 따라서 다양한 함수들이 제공되고 있지만 위 두 파일은 utils라는 R의 기본 패키지에 들어있는 함수들로서 가장 많이 사용되는 함수들 입니다. ?write.table 등으로 도움말을 보시고 특히 함수의 전달값 (Arguments) 들을 (quote, row.names, col.names, sep) 익혀두시기 바랍니다.대부분의 텍스트 파일은 아래와 같이 csv 또는 txt 파일로 저장하여 메모장으로 열어 확인할 수 있으며 읽어올 때 구분자 (sep 파라메터) 나 header를 (header 파라메터) 읽을지 등을 옵션으로 지정할 수 있습니다.Dataset_S1_sub.txt 파일을 열어보면 다음과 같이 header와 “,”로 구분되어 있는 것을 볼 수 있습니다. read.csv 함수의 도움말을 보면 이 함수의 파라메터 head와 sep이 기본값으로 T와 ,로 되어 있는 것을 볼 수 있습니다. read.csv 외에도 read.table, read.delim 등의 함수를 이용해서 택스트 파일을 읽어올 수 있습니다.Exercises위 mydf에서 가장 홈런을 많이 순서로 데이터를 정렬하시오위 정렬된 데이터를 mydf2 로 저장한 후 csv 형태의 baseball.csv 파일로 저장하시오","code":"\nlibrary(UsingR)\ndata(batting)\nstr(batting)\n\nmydf <- data.frame(id = batting$playerID, \n           team = batting$teamID,\n           hr = batting$HR,\n           so = batting$SO,\n           soperhr = batting$SO/batting$HR)\n\nhead(mydf)\nplot(mydf$hr, mydf$so)\nmycor <- cor(mydf$hr, mydf$so)\nfit <- lm(mydf$so ~ mydf$hr)\nplot(mydf$hr, mydf$so); abline(fit); text(50, 170, round(mycor,2))\n\nwrite.table(mydf, file=\"table_write.txt\")\nwrite.table(mydf, file=\"table_write.txt\", quote=F)\nwrite.table(mydf, file=\"table_write.txt\", quote=F, row.names=F)\nwrite.table(mydf, file=\"table_write.txt\", quote=F, row.names=F, sep=\",\")\nwrite.table(mydf, file=\"table_write.csv\", quote=F, row.names=F, sep=\",\")\ndat <- read.csv(\"Dataset_S1_sub.txt\")\nhead(dat)\nstr(dat)"},{"path":"data-transformation.html","id":"excel-file","chapter":"5 Data transformation","heading":"5.1.2 Excel file","text":"텍스트 파일 외에 엑셀파일은 readxl 이라는 R 패키지를 활용하여 읽거나 쓸 수 있습니다. 패키지는 다음과 같은 방법으로 설치할 수 있으며 read_excel 이라는 함수를 사용해서 데이터를 읽어들일 수 있습니다. 참고로 이 후 강의에서 배우게 될 tidyverse 패키지들 중 readr 패키지를 사용하여 엑셀파일 데이터를 다룰 수도 있습니다.실습 파일은 형광 세포를 배양하여 형광리더기를 이용해 얻어진 실제 데이터이며 plate_reader.xls 에서 다운로드 받을 수 있습니다. read_excel 함수를 이용하여 파일의 내용을 읽어오면 기본 자료형이 tibble 입니다. tibble은 최근 많이 쓰이는 R object로 data.frame과 유사하나 입력값의 type, name, rowname을 임으로 바꿀 수 없다는 점이 다릅니다.엑셀파일에는 두 종류의 (\\(OD600_{nm}\\), Fluorescence) 데이터가 저장되어 있습니다. 첫 번째 sheet에는 다음처럼 wide형 데이터가 저장되어 있습니다.프로토콜 상세 내역이 나온 세 번째 시트를 읽을 경우 sheet 옵션을 3로 설정하면 되며 skip=3으로 하고 컬럼 이름을 별도로 사용하지 않으므로 col_names=T로하여 읽을 수 있습니다.참고로 엑셀파일로 저장하기 위해서는 csv 파일로 데이터를 writing 한 뒤 Excel로 해당 csv 파일을 열고 xlsx 파일로 저장할 수 있습니다.","code":"\ninstall.packages(\"readxl\")\nlibrary(readxl)\n\ndat <- read_excel(\"plate_reader.xls\", sheet=1, skip = 0, col_names=T)\n\ndat <- read_excel(\"plate_reader.xls\", sheet=3, skip = 3, col_names=F)"},{"path":"data-transformation.html","id":"subset","chapter":"5 Data transformation","heading":"5.2 Subset","text":"R에서 데이터 저장은 data.frame이나 matrix 타입을 일반적으로 사용합니다. 이 데이터의 일부 열 또는 행의 데이터만을 가져와서 별도로 저장하거나 분석이 필요할 경우가 있습니다. 이 때 인덱싱을 사용해서 일부 데이터를 선택하고 사용할 수 있으며 subset 함수도 이러한 선별 기능을 제공합니다. subset은 행과 열 모두를 선별할 수 있는 함수입니다. 다음 airquality 데이터는 1973년 날짜별로 뉴욕의 공기질을 측정한 데이터 입니다. NA를 제외한 나머지 데이터만으로 새로운 데이터셋을 만들어 봅시다. .na함수를 사용하면 해당 데이터가 NA일 경우 TRUE, NA가 아닐 경우 FALSE 를 반환해 줍니다.위 ozone_complete1와 ozone_complete2는 같은 결과를 보입니다. 그러나 ozone_complete1 보다는 ozone_complete2 코드가 훨씬 직관적이고 가독성이 높습니다. 특히 airquality$ozone 로 $를 사용하여 변수에 접근한 것이 아닌 Ozone이라는 변수 이름을 직접 사용해서 접근함으로써 코드의 간결성과 가독성을 유지할 수 있습니다. 또한 subset의 select 옵션을 이용해서 변수를 선택할 수도 있으며 &()와 |() 연산자를 사용해서 조건을 두 개 이상 설정할 수 있습니다. 아래 select 옵션에서 -는 해당 변수를 제외한다는 의미 입니다.Exercisesairquality 데이터에서 Temp와 Ozone 변수로 이루어진 df라는 이름의 data.frame을 만드시오 (단 NA가 있는 샘플(열)은 모두 제외하시오)","code":"\nis.na(airquality$Ozone)\nozone_complete1 <- airquality[!is.na(airquality$Ozone),]\nozone_complete1 <- subset(airquality, !is.na(Ozone))\nozone_complete3 <- subset(airquality, !is.na(ozone), select=c(ozone, temp, month, day))\nozone_complete4 <- subset(airquality, !is.na(ozone) & !is.na(solar.r), select=c(-month, -day))"},{"path":"data-transformation.html","id":"merging-and-split","chapter":"5 Data transformation","heading":"5.3 Merging and Split","text":"merge 함수는 두 개 이상의 데이터셋을 통합하는 기능을 수행하는 함수입니다. 특히 rbind나 cbind와는 다르게, 결합하는 두 데이터에 공통적이거나 한 쪽의 데이터를 기준으로 결합을 수행 합니다. ?merge를 참고하면 , .x, .y, , .x, .y 등의 옵션으로 이러한 설정을 수행할 수 있습니다. 간단한 예제를 통해서 이해해 보겠습니다.10명의 사람이 있고 이 사람들의 나이와 성별을 각각 나타낸 두 데이터셋이 있습니다. 그런데 df1은 나이만을 df2는 성별 정보만을 가지고 있으며 두 정보 모두 제공된 사람은 3명 (인덱스 4,5,6) 뿐입니다. 이제 merge를 이용해서 두 데이터셋을 결합해 보겠습니다.만약 두 데이터셋의 id가 다를 경우나 각각 다른 기준으로 결합해야 하는 경우는 by대신 .x, .y 옵션을 사용할 수 있습니다.split 함수는 데이터를 특정 기준으로 나누는 역할을 하며 해당 기준은 factor 형 벡터 형태로 주어질 수 있습니다. 예를 들어 airquality 데이터의 month 변수를 기준으로 데이터를 분리해 보겠습니다.위와 같이 airq_split은 길이가 5인 (5, 6, 7, 8, 9월) list타입이 되었고 각 요소는 서로 다른 size의 data.frame형으로 구성 된 것을 확인할 수 있습니다.","code":"\n## merge\ndf1 <- data.frame(id=c(1,2,3,4,5,6), age=c(30, 41, 33, 56, 20, 17))\ndf2 <- data.frame(id=c(4,5,6,7,8,9), gender=c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"))\n\ndf_inner <- merge(df1, df2, by=\"id\", all=F)\ndf_outer <- merge(df1, df2, by=\"id\", all=T)\ndf_left_outer <- merge(df1, df2, by=\"id\", all.x=T)\ndf_right_outer <- merge(df1, df2, by=\"id\", all.y=T)\nstr(airquality)\ng <- factor(airquality$Month)\nairq_split <- split(airquality, g)\nclass(airq_split)\nstr(airq_split)"},{"path":"data-transformation.html","id":"transformation","chapter":"5 Data transformation","heading":"5.4 Transformation","text":"R에서 기존 가지고 있는 데이터의 변경은 새로운 변수의 추가, 삭제, 변형과 샘플의 추가, 삭제, 변형을 생각해 볼 수 있습니다. 이러한 기능은 앞에서 배운 merge, split이나 rbind, cbind, 그리고 인덱싱을 활용한 값 변경 등의 방법을 이용할 수 있습니다. 또한 가장 직관적으로 필요한 변수들을 기존 데이터셋에서 추출한 후 data.frame 명령어를 사용해서 새로운 데이터셋으로 만들어주면 될 것 입니다.이러한 방법들 외에 within을 사용할 경우 특정 변수의 변형과 이를 반영한 새로운 데이터셋을 어렵지 않게 만들수 있습니다. 함수의 사용 예와 함께 within 함수를 사용하여 데이터를 변형하는 예를 살펴봅니다. with나 within 함수는 R을 활용하는데 많이 사용되는 함수들은 아닙니다. 또한 이러한 기능들은 dplyr 등의 패키지에서 제공하는 경우가 많아서 필수적으로 익힐 부분은 아닙니다. 그러나 개념적인 이해를 돕기위한 좋은 도구들이며 여전히 고수준의 R 사용자들이 코드에 사용하고 있는 함수들이므로 알아두는 것이 좋습니다.위 함수에서 보는바와 같이 $를 이용한 변수 접근 대신 with함수 내에서는 ({, } 안에서) 해당 data.frame에 있는 변수 이름을 직접 접근할 수 있으며 따라서 코드의 간결함과 가독성이 향상됩니다.within 함수는 with함수와 같이 {, } 안에서 변수의 이름만으로 해당 변수에 접근이 가능하나 입력된 데이터와 변경된 변수(들)을 반환한다는 점이 다릅니다. 아래 예는 airquality 데이터의 화씨 (Fahrenheit) 온도를 섭씨 (Celsius) 온도로 변환해서 새로운 데이터셋을 만드는 코드입니다. data.frame을 이용한 코드와 비교해 보시기 바랍니다. 데이터셋 내에서 참조할 변수들이 많아질 경우 airquality$xxx 식의 코드를 줄이는 것 만으로도 코드의 가독성과 간결성을 유지할 수 있습니다.Exercises다음 df 의 hour, minute, second로 나누어진 값들을 초 단위로 변환하여 seconds라는 변수에 저장한 후 기존 df에 추가한 df2 데이터셋을 만드시오 (within 함수 이용)","code":"\n## without with\nozone_complete <- airquality[!is.na(airquality$Ozone),\"Ozone\"]\ntemp_complete <- airquality[!is.na(airquality$Temp),\"Temp\"]\nprint(mean(ozone_complete))\nprint(mean(temp_complete))\n\n## with\nwith(airquality, {\n  print(mean(Ozone[!is.na(Ozone)]))\n  print(mean(Temp[!is.na(Temp)]))\n})\nnewairquality <- within(airquality, {\n  celsius = round((5*(Temp-32))/9, 2)\n})\nhead(newairquality)\n\n## data.frame\ncelsius <- round((5*(airquality$Temp-32))/9, 2)\nnewairquality <- data.frame(airquality, celsius)\nhead(newairquality)\ndf <- data.frame(hour=c(4, 7, 1, 5, 8),\n                 minute=c(46, 56, 44, 37, 39),\n                 second=c(19, 45, 57, 41, 27))"},{"path":"data-transformation.html","id":"babies-example","chapter":"5 Data transformation","heading":"5.5 Babies example","text":"UsingR 패키지의 babies 데이터를 이용해서 산모의 흡연 여부와 신생아 몸무게의 관계를 알아보는 분석을 수행해 보겠습니다. 본 강의를 통해 배우지 않은 내용들이 있지만 코드를 따라 가면서 참고하시기 바랍니다. 우선 UsingR 패키지를 로딩합니다. 산모의 임신 기간이 (gestation) 999로 표기된 데이터는 명백히 에러이며 이들을 NA로 처리합니다.아래와 같이 within 함수를 사용해서 babies$ 를 반복해서 입력해주는 불편함을 줄이고 가독성을 높입니다. 똑같은 방법으로 dwt (아빠의 몸무게) 변수의 에러값들에 대해서도 NA 처리를 할 수 있습니다.smoke 변수는 흡연 여부를 나타내는 범주형 변수로 0, 1, 2, 3 값은 의미가 없습니다. 사람이 읽을 수 있는 label을 붙인 factor 형 변수로 변환하는 코드도 함께 작성해 보겠습니다.이제 임신기간과 흡연 여부를 분석해 볼 수 있습니다. 흡연 그룹별로 기간에 차이가 있는지를 알아보는 분석은 t-test나 ANOVA를 사용할 수 있습니다.간단히 결과를 보면 summary(fit)은 3가지 t-test의 결과를 보여줍니다. never vs. smoke new 의 경우 t값이 -1.657로 피우지 않은 경우에 비해서 피우는 사람의 임신 기간이 유의하게 줄어들었음을 알 수 있습니다. 그에 비해서 현재 흡연하지 않는 경우 (never vs. current pregnancy 또는 never vs. , now) 차이가 없는 것으로 나옵니다.이제 smoke now 인 경우 또는 나이가 25세 미만인 경우의 샘플에 대해서 newdf를 만들어 봅니다 (subset 함수 사용, id, gestation, age, wt, smoke 변수 선택). 이 후 ggplot을 이용하여 몸무게와 임신기간의 산점도를 그려보면 크게 다르진 않으나 흡연하는 여성 중 몸무게가 적게 나가는 여성에게서 짧은 임신기간을 갖는 경향을 볼 수 있습니다.","code":"\nlibrary(UsingR)\nhead(babies)\n## a simple way to checkout the data\nplot(babies$gestation)  \nbabies$gestation[babies$gestation>900] <- NA\nstr(babies)\nnew_babies <- within(babies, {\n  gestation[gestation==999] <- NA\n  dwt[dwt==999] <- NA\n})\nstr(new_babies)\nstr(babies$smoke)\nnew_babies <- within(babies, {\n  gestation[gestation==999] <- NA\n  dwt[dwt==999] <- NA\n  smoke = factor(smoke)\n  levels(smoke) = list(\n    \"never\" = 0, \n    \"smoke now\" = 1, \n    \"until current pregnancy\" = 2,\n    \"once did, not now\" = 3)\n  })\nstr(new_babies$smoke)\nfit <- lm(gestation~smoke, new_babies)\nsummary(fit) ## t-test 결과 \nanova(fit)\n\nnewdf <- subset(new_babies, (smoke==\"smoke now\" | smoke == \"never\") & age < 25, select=c(id, gestation, age, wt, smoke))\n# ggplot(newdf, aes(x=wt, y=gestation, color=smoke)) +\n#   geom_point(size=3, alpha=0.5) +\n#   facet_grid(.~smoke) + \n#   theme_bw()"},{"path":"data-transformation.html","id":"useful-functions-1","chapter":"5 Data transformation","heading":"5.6 Useful functions","text":"지금까지 배운 여러 R 프로그래밍 기법이나 함수들과 같이 R을 활용한 데이터 분석에서 자주쓰이거나 유용하게 사용되는 함수들을 소개합니다. 먼저 원소들을 비교하여 공통적 또는 유일한 원소들만을 추출해내는 함수들 입니다.다음은 스트링 관련 함수들로서 서열데이터 분석 등에서 유용하게 활용되는 함수들 입니다.Exercisesbuilt-데이터셋 중 state.abb 은 미국의 50개 주에대한 축약어임.이 중 문자 가 들어가는 주를 뽑아 x에 저장 하시오 (grep 또는 grepl 사용)이 중 문자 가 들어가는 주를 뽑아 x에 저장 하시오 (grep 또는 grepl 사용)state.abb 중 위 x에 저장된 이름들을 빼고 y에 저장 하시오 (match() 또는 %%사용)state.abb 중 위 x에 저장된 이름들을 빼고 y에 저장 하시오 (match() 또는 %%사용)state.abb에 사용된 알파벳의 갯수를 구하고 가장 많이 쓰인 알파벳을 구하시오 (strsplit(), table() 등 사용)state.abb에 사용된 알파벳의 갯수를 구하고 가장 많이 쓰인 알파벳을 구하시오 (strsplit(), table() 등 사용)","code":"\n#match(), %in%, intersect()\n\nx <- 1:10\ny <- 5:15\nmatch(x, y)\nx %in% y\nintersect(x, y)\n\n#unique()\nunique(c(x, y))\n#substr()\nx <- \"Factors, raw vectors, and lists, are converted\"\nsubstr(x, 1, 6)\n\n#grep()\ngrep(\"raw\", x)\n\n#grepl()\ngrepl(\"raw\", x)\nif(grepl(\"raw\", x)){\n  cat(\"I found raw!\")\n}\n\nx <- paste(LETTERS, 1:100, sep=\"\")\ngrep(\"A\", x)\nx[grep(\"A\", x)]\n\ngrepl(\"A\", x)\nr <- grepl(\"A\", x)\nif(r){\n  cat(\"Yes, I found A\")\n}else{\n  cat(\"No A\")\n}\n\n#strsplit()\nx <- c(\"Factors, raw vectors, and lists, are converted\", \"vectors, or for, strings with\")\ny <- strsplit(x, split=\", \")\n\n#unlist()\nunlist(y)\n\ny <- strsplit(x, split=\"\")\nychar <- unlist(y)\nycount <- table(y2)\nycount_sort <- sort(ycount)\nycount_sort <- sort(ycount, decreasing = T)\nycount_top <- ycount_sort[1:5]\nycount_top_char <- names(ycount_top)\n\n#toupper(), tolower()\ntoupper(ycount_top_char)"},{"path":"data-transformation.html","id":"apply","chapter":"5 Data transformation","heading":"5.7 apply","text":"apply는 데이터를 변형하기 위한 함수라기 보다는 데이터를 다룰 때 각 원소별, 그룹별, row, 또는 column 별로 반복적으로 수행되는 작업을 효율적으로 수행할 수 있도록 해주는 함수입니다. apply 계열의 함수를 적절히 사용하면 효율성이나 편리성 뿐만 아니라 코드의 간결성 등 많은 장점이 있습니다. 쉬운 이해를 위해 colMean 함수를 예로 들면 colMean은 column 또는 row 단위로 해당하는 모든 값들에 대해 평균을 계산해주는 함수이고 apply를 사용할 경우 다음과 같이 apply 함수와 mean 함수를 이용해서 같은 기능을 수행할 수 있습니다. 아래는 babies 데이터의 clearning 된 (위에서 만들었던) new_babies 데이터에 이어서 수행되는 내용입니다.위와 같이 colMeans와 apply가 똑같은 결과를 보여주고 있습니다. 두 번째 인자인 margin의 값으로 (?apply참고) 여기서는 2가 사용되었으며 margin 값이 1인지 2인지에 따라서 다음과 같이 작동을 합니다.mean외에도 다양한 함수들이 사용될 수 있으며 아래와 같이 임의의 함수를 만들어서 사용할 수 도 있습니다. 아래 코드에서는 function(x)...로 바로 함수의 정의를 넣어서 사용했으나 그 아래 mysd 함수와 같이 미리 함수 하나를 만들고 난 후 함수 이름을 이용해서 apply를 적용할 수 있습니다.apply 함수는 특히 R에서 느리게 작동하는 loop (, 등) 문 대신 사용되어 큰 행렬에 대해서도 빠른 계산 속도를 보여줄 수 있습니다.apply 함수 외에도 sapply, lapply, mapply 등의 다양한 apply계열 함수가 쓰일 수 있습니다. 먼저 lapply는 matrix 형태 데이터가 아닌 list 데이터에 사용되어 각 list 원소별로 주어진 기능을 반복해서 수행하며 sapply는 lapply와 유사하나 벡터, 리스트, 데이터프레임 등에 함수를 적용할 수 있고 그 결과를 벡터 또는 행렬로 반환합니다.마지막 예제에서처럼 sapply나 lapply도 임의의 함수를 만들어 적용시킬 수도 있습니다. 자세히 살펴 보면 y는 10개의 값을 갖는 벡터이고 이 벡터의 각 원소 (값에) 함수를 반복해서 적용하는 것 입니다. 함수에서 x는 각 원소의 값을 차례차례 받는 역할을 하므로 1부터 10까지 값이 함수로 들어가 2를 곱한 수가 반환됩니다. 따라서 벡터연산을 하는 y*2와 결과가 같으나 원하는 함수를 정의해서 자유롭게 사용할 수 있다는 장점이 있습니다. 리스트의 경우는 다음과 같이 사용합니다.즉, myfunc의 x가 list y의 각 원소들, y[[1]], y[[2]], y[[3]]를 각각 받아서 mean 연산을 수행해 줍니다. 결과로 각 list 원소들의 평균 값이 반환되며 unlist 함수는 list 형태의 반환 값을 vector 형태로 전환해 줍니다.Exercises다음은 앞에서 수행했던 airquality 데이터를 월별로 나눈 데이터셋임. 이 데이터셋을 이용하여 각 월별로 온도와 오존 농도의 평균값을 저장한 data.frame 형식의 데이터를 만들기 위하여 다음 단계별 과정에 적절한 코드를 작성하시오다음 df의 ozone 평균을 구하는 ozone_func 함수를 작성하시오 (단 입력은 data.frame 형식의 오브젝트를 받고 출력은 평균값 (정수 값 하나) 출력. mean 함수 사용시 데이터에 NA가 포함되어 있을 경우 na.rm=T 옵션 적용)lapply와 ozone_func 함수를 사용하여 airq_split list 데이터의 월별 ozone 평균 값을 구하고 ozone_means에 vector 형식으로 저장하시오lapply와 ozone_func 함수를 사용하여 airq_split list 데이터의 월별 ozone 평균 값을 구하고 ozone_means에 vector 형식으로 저장하시오위 1), 2)와 같은 방법으로 temp_func 함수를 만들고 월별 temp의 평균값을 temp_means에 vector 형식으로 저장하시오.위 1), 2)와 같은 방법으로 temp_func 함수를 만들고 월별 temp의 평균값을 temp_means에 vector 형식으로 저장하시오.위에서 구해진 두 변수값들을 이용하여 air_means 라는 이름의 data.frame으로 저장하시오위에서 구해진 두 변수값들을 이용하여 air_means 라는 이름의 data.frame으로 저장하시오Exercises다음 코드를 이용해서 파일을 다운로드 하고 myexp에 저장하고 데이터의 구조 및 샘플들의 이름을 확인하시오myexp의 1부터 10번째 샘플(컬럼) 데이터를 myexp1으로 11부터 20번째 샘플 데이터를 myexp2로 나누시오myexp의 1부터 10번째 샘플(컬럼) 데이터를 myexp1으로 11부터 20번째 샘플 데이터를 myexp2로 나누시오myexp1의 row별 평균을 구해서 myexp1mean에 myexp2의 row별 평균을 구해서 myexp2mean에 저장하시오 (apply 이용)myexp1의 row별 평균을 구해서 myexp1mean에 myexp2의 row별 평균을 구해서 myexp2mean에 저장하시오 (apply 이용)myexp1mean과 myexp2mean을 합하여 myexpmean이라는 data.frame을 만드시오 (cbind이용, 주의필요)myexp1mean과 myexp2mean을 합하여 myexpmean이라는 data.frame을 만드시오 (cbind이용, 주의필요)plot을 이용하여 두 평균들의 산포도를 그리시오plot을 이용하여 두 평균들의 산포도를 그리시오myexpmean의 두 변수에 대한 차이를 구하여 mydiff 라는 변수에 저장하시오myexpmean의 두 변수에 대한 차이를 구하여 mydiff 라는 변수에 저장하시오mydiff의 값들에 대한 히스토그램 (막대그래프)을 그리시오mydiff의 값들에 대한 히스토그램 (막대그래프)을 그리시오이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다.","code":"\nlibrary(UsingR)\nhead(babies)\ndf <- subset(babies, select=c(gestation, wt, dwt))\ncolMeans(df, na.rm=T)\napply(df, 2, mean, na.rm=T)\n\napply(df, 2, sd, na.rm=T)\napply(df, 2, function(x){ \n  xmean <- mean(x, na.rm=T) \n  return(xmean)\n  })\nn <- 40\nm <- matrix(sample(1:100, n, replace=T), ncol=4)\nmysd <- function(x){\n  xmean <- sum(x)/length(x)\n  tmpdif <- x-xmean\n  xvar <- sum(tmpdif^2)/(length(x)-1)\n  xsd <- sqrt(xvar)\n  return(xsd)\n}\n\n## for \nresults <- rep(0, nrow(m))\nfor(i in 1:nrow(m)){\n  results[i] <- mysd(m[i,])\n}\nprint(results)\napply(m, 1, mysd)\napply(m, 1, sd)\n\nx <- list(a=1:10, b=exp(-3:3), logic=c(T,T,F,T))\nmean(x$a)\nlapply(x, mean)\nsapply(x, mean)\n\nx <- data.frame(a=1:10, b=exp(-4:5))\nsapply(x, mean)\n\nx <- c(4, 9, 16)\nsapply(x, sqrt)\nsqrt(x)\n\ny <- c(1:10)\nsapply(y, function(x){2*x})\ny*2\ny <- list(a=1:10, b=exp(-3:3), logic=c(T,T,F,T))\nmyfunc <- function(x){\n  return(mean(x, na.rm=T))\n}\nlapply(y, myfunc)\nunlist(lapply(y, myfunc))\n## dataset\ng <- factor(airquality$month)\nairq_split <- split(airquality, g)\n## May data.frame\ndf <- airq_split[[1]]\n#\n# write your code here for ozone_func function\n#\n\n## Usage\nozone_func(df)\n## output\n# 23.61538myexp <- read.csv(\"https://github.com/greendaygh/kribbr2022/raw/main/examples/gse93819_expression_values.csv\", header=T)"},{"path":"lecture-2-note.html","id":"lecture-2-note","chapter":"6 Lecture 2 Note","heading":"6 Lecture 2 Note","text":"설명이나 실습을 위해 R 사용법 및 데이터 분석 기초 5.19(목), 5.26(목) 강의를 진행하며 작성한 코드입니다.","code":""},{"path":"lecture-2-note.html","id":"numeric-vector","chapter":"6 Lecture 2 Note","heading":"6.1 numeric vector","text":"Ctrl + Alt + 누르면 코드청크 생성커서를 해당 라인에 두구 Ctrl + Enter 누르면 해당 라인 실행기억할 단축키\nCtrl + 1 : 편집창\nCtrl + 2 : 콘솔창\nCtrl + 1 : 편집창Ctrl + 2 : 콘솔창변수에 값 저장하기변수 값 보기numeric vector 만들기연습문제 풀이vector의 인덱싱 (첫번째 값의 인덱스는 1부터 시작)logical vector 설명기본 그래픽 함수 이용하는 방법은 필요할때만 설명which 함수 활용한 40 이상만 선택which함수 활용한 짝수 만들기홀수 값을 저장하는 벡터 만들고 하나씩 샘플링 (sample 함수 사용)문자열 붙이기, ,로 나누어진 벡터들 각각의 원소를 붙여줌여러 벡터에서 각각의 원소를 붙여주는 기능collapse (하나의 벡터에서 해당 벡터의 원소들을 붙여주는 기능)예제 (sample(), paste(), rep())예제 ‘TAAGTCT’ 바코드를 각 서열의 3’에 붙여보기split 함수 사용factor 간단한 설명데이터에서 factor들 보기아미노산 및 각 아미노산에 해당하는 코돈 표현 예제useful functions","code":"\n2 + 2\n((2-1)^2 + (1-3)^2 )^(1/2)\n2 + 2; 2 - 2\nsqrt((4+3)*(2+1))\n2^3 + 3^2\nx <- 1\ny <- 2\nz <- x + y\nx\ny\nz\nprint(x)\ncat(x)\nx <- 1:5\nx\ny <- seq(1, 5, 1)\ny <- seq(from=1, to=5, by=1)\ny <- seq(to=5, from=1, by=1)\ny <- seq(5, 1, -1)\n?seq\ny\nodds <- seq(1, 100, by=2)\nodds  \nevens <- seq(2, 100, 2)\nevens\n\nodds[1]\nodds[1:10]\ni <- 1:10\ni\nodds[i]\ndim(odds)\nlength(odds)\nprecip\n?precip\n\nhead(precip)\nstr(precip)\ndim(precip)\n\nprecip[1]\nprecip[\"Mobile\"]\nprecip\nlength(precip)\nplot(precip)\nprecip > 40\nprecip[precip > 40]\nidx <- precip > 40\nwhich(idx)\nmyprecip <- precip[which(idx)]\nmyprecip\nplot(myprecip)\nmynumers <- 1:1000\nmynumers_res <- mynumers %% 2\ni <- which(mynumers_res == 0)\nevens <- mynumers[i]\nevens\nodds <- seq(1, 1000, 2)\nlength(evens)\nlength(odds)\n?sample\nmysample <- c(sample(evens, 1), sample(odds, 1))\nprint(mysample[1])\npaste(\"X\", \"Y\", \"Z\", sep=\"_\")\npaste(\"X\", \"Y\", \"Z\", sep=\"\")\npaste(\"X\", \"Y\", \"Z\", \"X\", \"Y\", \"Z\", \"X\", sep=\"\")\npaste(c(\"X\",\"Y\"), 1:10, sep=\"\")\n\ngene_names <- paste(\"gene\", 1:100, sep=\"\")\npaste(c(\"X\", \"Y\"), collapse = \"\")\n\nx <- sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T)\nx2 <- paste(x, collapse = \"\")\n\nmyseq <- rep(\"\", 5)\nmyseq[1] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[2] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[3] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[4] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[5] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\n\nmyseq\npaste(myseq, c(\"TAAGTCT\"), sep=\"\")\nstrsplit(\"XYZ\", split=\"\")\nx <- strsplit(\"XYZ\", split=\"\")\nclass(x)\nx\ny <- unlist(x)\nclass(y)\ny\nx <- c(\"Red\", \"Blue\", \"Yellow\", \"Red\", \"Blue\")\nx\ny <- factor(x)\ny\ny[1] <- \"gold\"\n\nlevels(y)[4] <- \"gold\"\ny\ny[1] <- \"gold\"\ny\nlibrary(MASS)\nCars93\nstr(Cars93)\n\naa <- c(\"Phe\", \"Leu\", \"Ser\")\nclass(aa)\naa <- factor(aa)\nclass(aa)\n\naa <- list()\naa[[1]] <- c(\"UUU\", \"UUC\")\naa\naa[[2]] <- c(\"UUA\", \"UUG\", \"CUA\", \"CUU\", \"CUG\", \"CUC\")\naa\nclass(aa)\nnames(aa) <- c(\"Phe\", \"Leu\")\naa\naa[[1]][1]\naa[[2]][3]\nz <- sample(1:10, 100, T)\n?sample\nz\nhead(z)\nsort(z)\norder(z)\ntable(z)"},{"path":"lecture-2-note.html","id":"matrix-1","chapter":"6 Lecture 2 Note","heading":"6.2 matrix","text":"연습문제 풀이 성적별 테이블 정렬","code":"\nmynum <- sample(1:100, 20, T)\nmynum\nscore <- matrix(mynum, nrow = 10, ncol = 2)\nscore\nmyrowname <- paste(\"Name\", 1:10, sep=\"\")\nmyrowname\nrownames(score) <- myrowname\nscore\ncolnames(score) <- c(\"Math\", \"Eng\")\n\ntotal_score <- score[,1] + score[,2]\ntotal_score <- score[,\"Math\"] + score[,\"Eng\"]\nsort(total_score, decreasing = T)\nscore\no <- order(total_score, decreasing = T)\no\nscore[o,]"},{"path":"lecture-2-note.html","id":"data.frame-1","chapter":"6 Lecture 2 Note","heading":"6.3 data.frame","text":"추가 연습문제: 수학, 영어 성적을 더해서 total_score를 만들고 이 값을 기준으로 내림차순으로 score 데이터프레임을 정렬 하시오.","code":"\n\nmath_score <- sample(1:100, 10, T)\neng_score <- sample(1:100, 10, T)\nscore <- data.frame(math_score, eng_score)\nscore\nscore$math_score\nscore$eng_score\ntotal_score <- score$math_score + score$eng_score\no <- order(total_score, decreasing = T)\nscore[o,]"},{"path":"lecture-2-note.html","id":"list-1","chapter":"6 Lecture 2 Note","heading":"6.4 list","text":"리스트 만들때 미리 원소의 개수를 알고 있으면 그 원소의 개수에 맞게 생성해 주는 것이 좋음 aa <- vector(\"list\", 5)각 아미노산에 해당하는 코돈 길이가 달라도 list 형태로 저장 가능바람직한 데이터는 column은 변수, row는 샘플 구조의 데이터. 예를 들어서, 변수:먹이, 수명 –> 컬럼, 샘플: 마우스1, 마우스2 –> Row, 등","code":"\nscore\nclass(score)\nmynum\nclass(mynum)\n\nz <- list()\nz[[1]] <- score\nz[[2]] <- mynum\nz\nnames(z) <- c(\"dataframe\", \"numericvector\")\nz\nz$dataframe\nz$numericvector\naa <- list()\naa[[1]] <- c(\"UUU\", \"UUC\")\naa\naa[[2]] <- c(\"UUA\", \"UUG\", \"CUA\", \"CUU\", \"CUG\", \"CUC\")\naa\nclass(aa)\nnames(aa) <- c(\"Phe\", \"Leu\")\naa\n\nas.data.frame(aa)\naa <- c(\"Phe\", \"Leu\")\ncodon <- c(\"UUU\", \"UUC\", \"UUA\", \"UUG\", \"CUA\", \"CUU\", \"CUG\", \"CUC\")\ndata.frame(aa, codon)\naa <- c(rep(\"Phe\", 2), rep(\"Leu\",6))\ncodon <- c(\"UUU\", \"UUC\", \"UUA\", \"UUG\", \"CUA\", \"CUU\", \"CUG\", \"CUC\")\ndata.frame(aa, codon)"},{"path":"lecture-2-note.html","id":"functions-1","chapter":"6 Lecture 2 Note","heading":"6.5 functions","text":"함수만들기함수 만든 후 loading 할 때 {, } 밖에서 Ctrl + Enter로 로딩데이터 표준화 예제코드비교","code":"\nsource(\"myscript.R\")my_function_name <- function(parameter1, parameter2, ... ){\n  ##any statements\n  return(object)\n}\n\n## mynumers: numeric vector\nmymean <- function(mynumers){\n  #cat(\"Input numbers are\", mynumers, \"\\n\")\n  numbers_mean <- sum(mynumers)/length(mynumers)\n  #out <- paste(\"The average is \", numbers_mean, \".\\n\", sep=\"\")\n  #cat(out)\n  return(numbers_mean)\n}\nmymean(c(1,2,3))\n\nx <- c(1, 2, 3, 0.452, 1.474, 0.22, 0.545, 1.205, 3.55)\nmymean(x)\n\nmymean()\nmysd <- function(x){\n  numbers_sd <- sqrt(sum((x - mymean(x))^2)/(length(x)-1))  \n  return(numbers_sd)\n}\n\n#x <- sample(1:100, 1000, T)\nx <- rnorm(1000, 10, 5)\nz <- (x - mymean(x))/mysd(x)\nmymean(z)\nmysd(z)\nmymean(x)\nmysd(x)\n\nplot(density(x))\ndensity(x)\nx <- c(10, 20, 30)\nx + 10\n\ny <- rep(0, 3)\nfor(i in 1:3){\n  y[i] <- x[i] + 10\n}\ny"},{"path":"lecture-2-note.html","id":"for","chapter":"6 Lecture 2 Note","heading":"6.6 for","text":"랜덤 서열만들기 예제","code":"\nx <- 1:10\nfor(i in x){\n  cat(i, \"\\n\")\n  flush.console()\n}\nx <- 1\nwhile(x <= 10){\n  cat(x, \"\\n\")\n  flush.console()\n  x <- x + 1\n}\n\nx <- sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T)\nx2 <- paste(x, collapse = \"\")\n\nmyseq <- rep(\"\", 5)\nmyseq[1] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[2] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[3] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[4] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\nmyseq[5] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T), collapse=\"\")\n\n\nnumseq <- 7\nmyseq <- rep(\"\", numseq)\nfor(i in 1:length(myseq)){\n  x <- sample(c(\"A\", \"C\", \"G\", \"T\"), size=20, replace = T)\n  myseq[i] <- paste(x, collapse=\"\")\n}\nmyseq"},{"path":"lecture-2-note.html","id":"data-transformation-1","chapter":"6 Lecture 2 Note","heading":"6.7 Data transformation","text":"UsingR 패키지의 babies 데이터셋을 적절히 변환하는 예제. with와 within 활용법 알아두기 (설명 안 함)","code":"\nlibrary(UsingR)\nhead(babies)\nstr(babies)\n\n\nnew_babies <- within(babies, {\n  gestation[gestation==999] <- NA\n  dwt[dwt==999] <- NA\n  smoke = factor(smoke)\n  levels(smoke) = list(\n    \"never\" = 0, \n    \"smoke now\" = 1, \n    \"until current pregnancy\" = 2,\n    \"once did, not now\" = 3)\n  })\nstr(new_babies)\n\nfit <- lm(gestation~smoke, new_babies)\nsummary(fit) ## t-test 결과 \nanova(fit)"},{"path":"r-basic-graphics.html","id":"r-basic-graphics","chapter":"7 R basic graphics","heading":"7 R basic graphics","text":"","code":""},{"path":"r-basic-graphics.html","id":"scatter-plot","chapter":"7 R basic graphics","heading":"7.1 scatter plot","text":"R에서 plot 함수는 가장 기본이 되는 그래프 함수 입니다. 아래는 산포도를 그려주는 코드로서 myxy가 두 개의 변수(x1과 y1)를 가지고 있으므로 아래 명령들은 모두 같은 그림을 그려주게 됩니다.가장 마지막 명령은 formula를 사용한 plot으로 첫번째 파라메터 인자로 formula 타입이 전달되면 plot.formula 함수가 실행되며 x, y 값이 전달될 경우 plot.default 함수가 수행됩니다. R에서는 이렇게 전달되는 파라메터의 타입에 따라서 다른 기능을 하는 함수를 Generic function 이라고 합니다. 만약 기존 그림에 추가 데이터의 산포를 그리고 싶은 경우 points라는 함수를 사용합니다.","code":"\nx <- c(1:100)\ny <- x*2 + rnorm(100)\nmyxy <- data.frame(x,y)\nplot(myxy)\nplot(myxy$x, myxy$y)\nplot(x=myxy$x, y=myxy$y)\nplot(y~x, data=myxy)\nz <- sample(1:100, 100, replace =T)\npoints(x, z)\npoints(x, z, col=\"red\")"},{"path":"r-basic-graphics.html","id":"histogram","chapter":"7 R basic graphics","heading":"7.2 histogram","text":"hist 함수는 데이터들의 분포를 히스토그램으로 그려주는 함수입니다. 히스토그램은 데이터들이 갖는 값을 특정 구간으로 나누고 각 구간에 해당하는 데이터가 몇 개인지 빈도수를 계산하여 막대그래프로 보여줍니다.","code":"\nx <- rnorm(100)\nhist(x, br=20, xlim=c(-3,3), main=\"Main text\", xlab=\"X label\")\n\n\nhist(airquality$Wind, br=50)\nhist(airquality$Wind, br=10)"},{"path":"r-basic-graphics.html","id":"boxplot","chapter":"7 R basic graphics","heading":"7.3 boxplot","text":"boxplot (상자 수염 그림)은 데이터의 여러가지 대표값 (중간값 median, 첫번째 사분위수 1st quantile, 세번째 사분위수 3rd quantile, 최소 minimum, 최대값 maximum) 등을 한눈에 볼 수 있도록 만들어놓은 그래프 입니다. 수염이 나타내는 값은 최소값이나 최대값이 될 수 있고 또는 하위 1.5 IQR 에서 최소 데이터와 상위 1.5 IQR 내에 최고 데이터를 나타낼 수 있으며 이 경우 그 외에 존재하는 값들은 outlier가 됩니다.data.frame 타입의 오브젝트에 대해서 boxplot을 그릴 경우 여러 변수의 데이터들의 분포를 한눈에 비교할 수 있읍니다.","code":"\nx <- rnorm(100)\nboxplot(x)\n\nr <- boxplot(airquality$Wind)\n\nairquality$Wind[which(airquality$Wind > (1.5*(r$stats[4]-r$stats[2])+r$stats[4]))]\n\nwith(airquality, {\n  Wind[which(Wind > (1.5*(r$stats[4]-r$stats[2])+r$stats[4]))]\n})\n\nwith(airquality, {\n  val <- (1.5*(r$stats[4]-r$stats[2])+r$stats[4])\n  Wind[which(Wind > val)]\n})\n\nwith(airquality, {\n  iqr <- quantile(Wind, 3/4) - quantile(Wind, 1/4)\n  val <- 1.5 * iqr + quantile(Wind, 3/4)\n  Wind[which(Wind > val)]\n})\ny <- rnorm(100, 1, 1)\n#boxplot(y)\nxy <- data.frame(x, y)\nboxplot(xy)\nclass(xy)\n\n##\nmean_vals <- sample(10)\nmymat <- sapply(mean_vals, function(x){rnorm(100, x)})\ndim(mymat)\nboxplot(mymat)"},{"path":"r-basic-graphics.html","id":"barplot","chapter":"7 R basic graphics","heading":"7.4 barplot","text":"막대그래프는 각 값들을 막대 형태로 나란히 배치하여 서로 비교가 용이하도록 만든 그래프 입니다. table 함수는 같은 값을 갖는 데이터들이 몇 개나 있는지 테이블을 만들어주는 함수 입니다. rbind는 두 변수를 row를 기준으로 붙여주는 역할의 함수입니다.Exercisesiris 데이터의 꽃받침 (Sepal) 길이와 넓이를 각각 x와 y축으로 하는 산포도를 그리시오iris 데이터에서 setosa 품종의 꽃받침의 (Sepal) 길이와 넓이 데이터를 빨간 점으로 나타내시오iris 데이터에서 꽃받침과 (Sepal) 꽃잎의 (Petal) 길이의 분포를 그리시오 (hist 사용)iris 데이터에서 꽃받침과 (Sepal) 꽃잎의 (Petal) 넓이의 분포를 그리시오 (boxplot 사용)iris 데이터에서 품종별 꽃받침 (Sepal) 길이의 분포를 그리시오 (boxplot 사용)","code":"\nx <- sample(1:12, 200, replace = T)\ntab_x <- table(x)\ny <- sample(1:12, 200, replace = T)\ntab_y <- table(y)\ntab_xy <- rbind(tab_x, tab_y)\nbarplot(tab_xy)\nbarplot(tab_xy, beside = T)\nbarplot(tab_xy, beside = T, col=c(\"darkblue\",\"red\"))\nbarplot(tab_xy, beside = T, col=c(\"darkblue\",\"red\"), xlab=\"Month\")\nbarplot(tab_xy, beside = T, col=c(\"darkblue\",\"red\"), xlab=\"Month\", horiz=TRUE)"},{"path":"r-basic-graphics.html","id":"draw-multiple-graphs-in-the-same-plot","chapter":"7 R basic graphics","heading":"7.5 Draw multiple graphs in the same plot","text":"위 예제들에서 사용한 high level function들을 low level function (lines, points, ablines, axis 등)들과 함께 사용함으로써 원하는 도표 대부분을 그려낼 수 있습니다. 최근 널리 사용되는 ggplot2 패키지를 이용한 그래프 사용법 강의에서는 오늘 배우는 그래픽 명령어는 거의 사용하지 않습니다. 그러나 위 함수들은 R의 기본 그래프 함수들로서 단순한 도표에서부터 복잡한 그래픽까지 구현할 수 있는 다양한 유연성을 제공하므로 기본적인 사용법을 정확히 이해하는 것이 좋습니다.아래 도표는 평균 0, 분산 1인 분포에서 500개의 랜덤한 수를 뽑아 x에 저장하고 x의 분포를 히스토그램으로 표현한 것 입니다. 그리고 x 값들과 상관성이 있는 y값들을 (x에 2를 곱하고 평균 5, 분산 1인 랜덤하게 뽑힌 수를 노이즈로 더함) 생성하고 모든 1000개 값들의 분포를 그린 히스토그램 입니다.이제 위 histogram 그래프에 density 함수와 lines 함수를 조합하여 확률밀도함수 커브를 그려 넣을 수 있습니다. 이 때 hist 함수에 probability=T 옵션을 넣어 y축의 스케일을 확률밀도함수의 y 스케일과 맞춰주어 같은 화면에 그려지도록 했습니다.또한 아래 그래프는 위에서 생성한 x, y 값의 산포도를 그리고 x축과 y축 범위를 xlim, ylim 파라메터로 조절하는 예제 입니다. ?pch 도움말을 참고하여 다양한 포인트 모양을 선택할 수 있으며 x 값이 0 보다 작은 경우의 index를 뽑아 해당되는 x 값들과 그 값들의 짝이 되는 y값들에 대해서만 다시 포인트 그림을 red 색상으로 그려 넣었습니다. lm 은 linear model의 약자로 회귀 곡선을 구할 때 사용하는 함수이며 이 함수를 abline과 조합하여 회귀 직선을 그릴 수 있습니다.Exercises1부터 100까지 수 를 랜덤하게 1000개 생성해서 x좌표를 생성하고 xcoord에 저장 하시오 (중복허용)1부터 100까지 수 를 랜덤하게 1000개 생성해서 y좌표를 생성하고 ycoord에 저장 하시오 (중복허용)x, y 좌표 평면에 xcoord와 ycoord 값을 이용하여 좌표를 (산포도) 그리되 x와 y의 범위가 모두 -10부터 110까지 되도록 지정 하시오 (plot 이용)앞서 문제와 같은 plot에 x가 50보다 크고 y가 50보다 큰 곳에 있는 좌표들에 red closed circle로 표현하시오 (, points, pch parameter 등 이용, 아래 참고)앞서 문제와 같은 plot에 x가 50보다 작고 y가 50보다 큰 곳에 있는 좌표들에 blue closed circle로 표현하시오 (, points, pch parameter 등 이용)앞서 문제와 같은 plot에 원점으로부터 거리가 50 이하인 좌표들을 green closed circle로 표현 하시오","code":"\nx <- rnorm(500)\nhist(x, 100)\ny <- 2*x + rnorm(500, mean=5, sd=1)\nz <- c(x,y)\nhist(z, br=100)\nhist(z, br=100)\nhist(z, br=100, probability = T)\nzd <- density(z)\nlines(zd)\nplot(x,y, xlim=c(-5, 5), ylim=c(-5, 15), pch=3)\nidx <- which(x<0)\npoints(x[idx], y[idx], col=\"red\")\nfit <- lm(y~x)\nabline(fit)\nidx <- which(xcoord>50 & ycoord>50)\npoints(x=xcoord[idx], y=ycoord[idx], col=\"red\", pch=19)"},{"path":"r-basic-graphics.html","id":"usuful-functions-ii","chapter":"7 R basic graphics","heading":"7.6 Usuful functions II","text":"Exercisesbuilt-데이터셋 중 state.abb 은 미국의 50개 주에대한 축약어임.이 중 문자 가 들어가는 주를 뽑아 x에 저장 하시오 (grep 또는 grepl 사용)이 중 문자 가 들어가는 주를 뽑아 x에 저장 하시오 (grep 또는 grepl 사용)state.abb 중 위 x에 저장된 이름들을 빼고 y에 저장 하시오 (match() 또는 %%사용)state.abb 중 위 x에 저장된 이름들을 빼고 y에 저장 하시오 (match() 또는 %%사용)state.abb에 사용된 알파벳의 갯수를 구하고 가장 많이 쓰인 알파벳을 구하시오 (strsplit(), table() 등 사용)state.abb에 사용된 알파벳의 갯수를 구하고 가장 많이 쓰인 알파벳을 구하시오 (strsplit(), table() 등 사용)Exercisesiris 데이터셋의 각 Species 별로 꽃잎과 꽃받침의 길이와 넓이에 대한 평균값들을 구하고 막대그래프를 그리시오각 species 별로 데이터를 나누시오 (list 형태)list의 각 원소 (data.frame)의 변수들의 평균을 lapply를 사용하여 구하시오do.call과 rbind 함수로 list의 원소를 통합해 data.frame을 생성하시오barplot을 이용하여 막대그래프를 그리시오이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다.","code":"\n#match(), %in%, intersect()\n\nx <- 1:10\ny <- 5:15\nmatch(x, y)\nx %in% y\nintersect(x, y)\n\n#unique()\nunique(c(x, y))\n\n#substr()\nx <- \"Factors, raw vectors, and lists, are converted\"\nsubstr(x, 1, 6)\n\n#grep()\ngrep(\"raw\", x)\n\n#grepl()\ngrepl(\"raw\", x)\nif(grepl(\"raw\", x)){\n  cat(\"I found raw!\")\n}\n\nx <- paste(LETTERS, 1:100, sep=\"\")\ngrep(\"A\", x)\nx[grep(\"A\", x)]\n\ngrepl(\"A\", x)\nr <- grepl(\"A\", x)\nif(r){\n  cat(\"Yes, I found A\")\n}else{\n  cat(\"No A\")\n}\n\n#strsplit()\nx <- c(\"Factors, raw vectors, and lists, are converted\", \"vectors, or for, strings with\")\ny <- strsplit(x, split=\", \")\n\n#unlist()\nunlist(y)\n\ny <- strsplit(x, split=\"\")\nychar <- unlist(y)\nycount <- table(y2)\nycount_sort <- sort(ycount)\nycount_sort <- sort(ycount, decreasing = T)\nycount_top <- ycount_sort[1:5]\nycount_top_char <- names(ycount_top)\n\n#toupper(), tolower()\ntoupper(ycount_top_char)"},{"path":"tidyverse.html","id":"tidyverse","chapter":"8 tidyverse","heading":"8 tidyverse","text":"tidyverse (https://www.tidyverse.org/)는 데이터 사이언스를 위한 R 기반의 독창적인 패키지들의 모음입니다. Rstudio의 핵심 전문가인 해들리위컴이 (Hadley Wickham) 중심이 되어 만들어 졌으며 기존의 툴보다 쉽고 효율적으로 데이터 분석을 수행할 수 있습니다.데이터사이언스는 넓은 범위의 개념과 방법적인 정도가 있는 것은 아닙니다. 그러나 tidyverse의 목적은 데이터 분석을 위한 핵심이되는 고효율의 툴을 제공하는 것이며 그 철학은 다음과 같은 그림으로 요약할 수 있습니다.https://r4ds..co.nz/","code":""},{"path":"tidyverse.html","id":"tibble-object-type","chapter":"8 tidyverse","heading":"8.1 tibble object type","text":"R은 20년 이상된 비교적 오랜 역사를 가진 언어로서 data.frame 형태의 데이터 타입이 가장 많이 사용되고 있습니다. 그러나 당시에는 유용했던 기능이 시간이 흐르면서 몇몇 단점들이 드러나는 문제로 기존 코드를 그대로 유지한채 package 형태로 단점을 보완한 새로운 형태의 tibble 오브젝트 형식을 만들어 냈습니다. 대부분의 R 코드는 여전히 data.frame 형태의 데이터 타입을 사용하고 있으나 tidyverse에서는 tibble이 사용되는 것을 참고하시기 바랍니다.tibble은 data.frame과 다음 몇 가지 점이 다릅니다. data.frame의 경우 타입을 변환할 때 강제로 값의 타입을 바꾸거나 내부 변수의 이름을 바꾸는 경우가 있었으나 tibble은 이를 허용하지 않습니다. 샘플들 (row) 이름을 바꿀수도 없습니다. 또한 프린팅할 때 출력물에 나오는 정보가 다르며 마지막으로 data.frame은 subset에 대한 타입이 바뀔 경우가 있었지만 tibble은 바뀌지 않습니다.tibble은 컬럼 하나가 벡터형 변수가 아닌 리스트형 변수가 될 수 있다는 것도 data.frame과 다른 점 입니다.또한 다음과 같이 사용되는 변수의 (x) 참조 범위가 다릅니다.","code":"\nlibrary(tidyverse)\n\ntb <- tibble(\n  x = 1:5, \n  y = 1, \n  z = x ^ 2 + y\n)\n\nas_tibble(iris)\nhead(iris)\n\nx <- 1:3\ny <- list(1:5, 1:10, 1:20)\n\ndata.frame(x, y)\ntibble(x, y)\nnames(data.frame(`crazy name` = 1))\nnames(tibble(`crazy name` = 1))\n\ndata.frame(x = 1:5, y = x ^ 2)\ntibble(x = 1:5, y = x ^ 2)\ndf1 <- data.frame(x = 1:3, y = 3:1)\nclass(df1)\nclass(df1[, 1:2])\nclass(df1[, 1])\n\ndf2 <- tibble(x = 1:3, y = 3:1)\nclass(df2)\nclass(df2[, 1:2])\nclass(df2[, 1])\nclass(df2$x)"},{"path":"tidyverse.html","id":"tidy-data-structure","chapter":"8 tidyverse","heading":"8.2 Tidy data structure","text":"데이터의 변수와 값을 구분하는 일은 적절한 데이터 분석을 위해 필수적인 과정입니다. 특히 복잡하고 사이즈가 큰 데이터일 경우는 더욱 중요할 수 있으나 경험에 의존해서 구분을 하는 것이 대부분 입니다. Tidy data는 이러한 변수와 값의 명확한 구분과 활용을 위한 데이터 구조중 하나 입니다 (Hadley Wickham. Tidy data. Journal Statistical Software, vol. 59, 2014).tidy data는 다음과 같은 특징이 있습니다.각 변수는 해당하는 유일한 하나의 column을 가짐각 샘플은 해당하는 유일한 하나의 row를 가짐각 관측값은 해당하는 유일한 하나의 cell을 가짐from https://r4ds..co.nz/Tidy 데이터는 Long형 데이터로 알려져 있기도 합니다. 참고로 Wide형 데이터의 경우 샘플 데이터가 늘어날수록 row에 쌓이고 새로운 변수는 column에 쌓이는 방식으로 데이터가 확장되는 형태 입니다. 엑셀에서 볼 수 있는 일반적인 형식으로 다음 그림과 같습니다.Long형 데이터의 경우 ID, variable, value 세가지 변수만 기억하면 되겠습니다. 위 wide형 데이터 경우를 보면 ID, variable, 그리고 value 이 세가지 요인이 주요 구성 요소임을 알 수 있습니다. Long형으로 변환할 경우 샘플을 참조할 수 있는 어떤 변수 (variable)도 ID가 될 수 있으며 2개 이상의 변수가 ID로 지정될 수 있습니다. 참고로 ID를 지정할 경우 해당 ID는 가능하면 중복되지 않는 값들을 갖는 변수를 사용해야 식별자로서 기능을 적절히 수행할 수 있습니다. Long형을 사용할 경우 데이터의 변수가 늘어나도 행의 수만 늘어나므로 코딩의 일관성과 변수들의 그룹을 만들어서 분석하는 등의 장점이 있습니다. 아래는 새로운 변수 F가 추가될 때 long 형 데이터에 데이터가 추가되는 경우를 나타낸 그림 입니다.","code":""},{"path":"tidyverse.html","id":"pipe-operator","chapter":"8 tidyverse","heading":"8.3 Pipe operator","text":"tidyverse 패키지를 활용하기 위해서는 %>% 파이프 오퍼레이터의 이해가 필요합니다. 파이프 오퍼레이터의 작동법은 간단히 %>%의 왼쪽 코드의 결과를 출력으로 받아 오른쪽 코드의 입력 (첫번째 파라미터의 값)으로 받아들이는 작동을 합니다 (단축키: Shift+Ctrl+m). 다음 예에서 보면 sin(pi) 와 같은 함수의 일반적인 사용법 대신 pi %>% sin 처럼 사용해도 똑같은 결과를 보여줍니다. cos(sin(pi))와 같이 여러 합수를 중첩하여 사용할 경우와 비교해서 코드의 가독성이나 효율 측면에서 크게 향상된 방법을 제공해 줍니다.특히 %>%는 이후 설명할 dplyr의 group_by, split, filter, summary 등 행렬 편집/연산 함수를 빈번히 다양한 조합으로 쓰게되는 상황에서 더 큰 효과를 발휘할 수 있습니다.pipe operator의 왼쪽 구문의 결과가 오른쪽 구문의 첫 번째 파라미터의 입력 값으로 처리된다고 말씀 드렸습니다. 즉, 함수에서 사용되는 파라미터가 여러개일 경우가 있으므로 기본적으로 %>% 의 왼쪽 구문의 출력 값은 오른쪽 구문 (함수)의 첫 번째 인자의 입력값으로 들어가는 것 입니다. 이는 다음 예들을 통해서 명확히 알 수 있습니다. 먼저 paste함수는 그 파라미터로 ,로 구분되는 여러개의 입력 값을 가질 수 있습니다. 따라서 다음 코드는 x가 paste의 첫 번째 파라미터로 들어가게 되어 \"1a\", \"2a\", \"3a\", \"4a\", \"5a\"로 앞에 x 값들이 붙어서 출력된 것을 알 수 있습니다.특정 데이터셋의 컬럼별 평균을 구하고 각 평균의 합을 구할 경우를 생각해 봅시다. R에서는 colMeans라는 특별한 함수를 제공하여 컬럼별로 평균을 계산해 줍니다. 그 후 sum 함수를 사용하여 최종 원하는 값을 얻을 수 있습니다. 이러한 코드를 %>% 오퍼레이터를 사용한 경우의 코드와 비교해 볼 수 있습니다.그럼 만약 두 번째 파라미터에 입력으로 왼쪽 구문의 출력을 받아들이고 싶을 경우는 place holer . 을 사용하면 되겠습니다. round 함수는 두 개의 파라미터를 설정할 있 이으며 digits 라는 두 번째 파라미터에 값을 pipe operator로 넘겨주고 싶을 경우 아래와 같이 표현할 수 있습니다.Exercisespipe operator를 사용해서 airquality데이터를 long형으로 전환하는 코드를 작성하시오 (단 col 파라메터에는 Ozone, Solar.R, Wind, Temp 변수를 넣음)pipe operator를 사용해서 airquality데이터의 Month와 Day 변수(컬럼)을 Date 변수로 병합하는 코드를 작성하시오","code":"\nlibrary(dplyr)\n\npi %>% sin\nsin(pi)\npi %>% sin %>% cos\ncos(sin(pi))\nx <- 1:5\nx %>% paste(\"a\", sep=\"\")\nx <- data.frame(x=c(1:100), y=c(201:300))\nsum(colMeans(x))\n\nx <- data.frame(x=c(1:100), y=c(201:300))\nx %>% colMeans %>% sum\n6 %>% round(pi, digits=.)\nround(pi, digits=6)"},{"path":"tidyverse.html","id":"pivoting","chapter":"8 tidyverse","heading":"8.4 Pivoting","text":"일반적으로 얻어지는 데이터의 형태는 wide형이며 이를 Long형으로 변환하기 위해서는 tidyverse 패키지에 속한 tidyr 패키지의 pivot_longer와 pivot_wider를 사용합니다. 또한 reshape2 패키지의 melt함수와 그 반대의 경우 dcast 함수를 사용할 수도 있습니다. 본 강의에서는 tidyr 패키지를 사용합니다. wide형 데이터를 long형으로 변환하거나 long형을 wide형으로 변환하는 작업을 pivoting 이라고 합니다.airquality 데이터는 전형적인 wide형 데이터로 특정 날짜에 네 개의 변수에 해당하는 값들을 측정했습니다. 이 데이터를 long형으로 바꿀 경우 ID를 날짜로 하면 데이터들을 식별 할 수 있습니다. 그런데 날짜는 변수가 Month와 Day두 개로 나누어져 있으므로 다음과 같이 두 변수를 식별 변수로 (ID로) 사용 합니다. 확인을 위해 상위 5개의 데이터만 가지고 형 변환을 진행해 보겠습니다.생성되는 long형 데이터의 변수 이름인 name과 value는 다음 파라메터를 지정하여 바꿀 수 있습니다.long형 데이터를 wide형 데이터로 변환 할 수도 있습니다.Exercises다음 데이터가 long형인지 wide형인지 판단하시오long형이면 wide형으로 wide형이면 long형으로 변환하시오Exercises앞서 gse93819 데이터에서 만든 myexpmean data.frame을 long 형으로 변환하시오ggplot을 이용한 그래프 작성에는 위와 같은 long형 데이터가 주로 사용됩니다. R을 이용한 데이터 가시화는 dplyr 패키지로 wide형 데이터를 편집하고 pivot_longer 함수로 long형 데이터로 변환 후 ggplot을 이용하는 방식으로 수행합니다. 두 데이터 포멧에 대한 좀 더 구체적인 내용은 다음 링크를 참고하시기 바랍니다. https://www.theanalysisfactor.com/wide--long-data/","code":"\nairquality\n\nmyair <- airquality[1:5,]\nmyair_long <- pivot_longer(myair, c(\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\"))\nmyair_long \n\nmyair_long <- myair %>% \n  pivot_longer(c(\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\"))\nmyair_long \n\nmyair_long2 <- myair %>% \n  pivot_longer(c(Ozone, Solar.R, Wind, Temp))\nmyair_long2 \n\nmyair_long3 <- myair %>% \n  pivot_longer(!c(Month, Day))\nmyair_long3\n\n\nmyair_long <- myair %>% \n  pivot_longer(c(Ozone, Solar.R, Wind, Temp), \n               names_to = \"Type\", \n               values_to = \"Observation\")\nmyair_long \nmyair_long %>% \n  pivot_wider(\n    names_from = Type, \n    values_from = Observation)\nstocks <- tibble(\n  year   = c(2015, 2015, 2016, 2016),\n  month  = c(   1,    2,     1,    2),\n  profit = c(1.88, 0.59, 0.92, 0.17)\n)"},{"path":"tidyverse.html","id":"separating-and-uniting","chapter":"8 tidyverse","heading":"8.5 Separating and uniting","text":"데이터를 분석할 때 하나의 컬럼에 두 개 이상의 변수값이 저장되어 있거나 두 개의 변수를 하나의 컬럼으로 합해야 하는 경우가 종종 있습니다. 전자의 경우 separate() 함수를 사용해서 두 변수(컬럼)으로 나누어 줄 수 있으며 후자의 경우 unite() 함수를 사용하여 두 변수를 하나의 값으로 병합할 수 있습니다. 다음은 airquality데이터에서 Month와 Day 변수를 하나의 컬럼으로 병합하여 Date라는 변수로 만들어 주는 경우의 예 입니다.separate()함수를 사용하면 다음과 같이 해당 변수의 값을 나누어 다시 두 개의 변수(컬럼)으로 나누어 줄 수 있습니다.","code":"\n\nnewairquality <- airquality %>% \n  unite(Date, Month, Day, sep=\".\")\nnewairquality\nnewairquality %>% \n  separate(col=Date, into = c(\"Month\", \"Day\"), sep = \"\\\\.\")"},{"path":"tidyverse.html","id":"dplyr","chapter":"8 tidyverse","heading":"8.6 dplyr","text":"dplyr (https://dplyr.tidyverse.org/) 은 ggplot2을 개발한 해들리위컴이 (Hadley Wickham) 중심이 되어 만들어 졌으며 ggplot2와 함께 tidyverse의 (https://www.tidyverse.org/) 핵심 패키지 입니다. dplyr은 데이터를 다루는 크기나 분석의 속도, 편의성을 향상시켜 새롭게 만들어놓은 패키지 입니다. 기존 apply와 같은 행렬 연산 기능과 subset, split, group 와 같은 행렬 편집 기능을 더하여 만들어진 도구라고 할 수 있습니다.dplyr의 전신이라 할 수 있는 plyr 패키지는 다음과 같이 설명이 되어 있습니다. set tools common set problems: need split big data structure homogeneous pieces, apply function piece combine results back together. 즉 split-apply-combine 세 가지 동작을 쉽게 할 수 있도록 만들어 놓은 툴 입니다. R이 다른 언어에 비해 데이터 분석에서 주목을 받는 이유로 split, apply 등의 행렬 연산 함수가 발달한 것을 내세우는데 dplyr은 이들을 보다 더 편리하게 사용할 수 있도록 만들어 놓은 것 입니다.이제 dplyr 패키지에서 제공하는 함수를 사용해 보겠습니다. dplyr을 구성하는 중요한 함수는 다음과 같습니다.select() - 변수 (columns) 선택select() - 변수 (columns) 선택filter() - 샘플 (rows) 선택filter() - 샘플 (rows) 선택arrange() - 샘플들의 정렬 순서 변경arrange() - 샘플들의 정렬 순서 변경mutate() - 새로운 변수 만들기mutate() - 새로운 변수 만들기summarise() - 대표값 만들기summarise() - 대표값 만들기group_by() - 그룹별로 계산 수행group_by() - 그룹별로 계산 수행join() - 두 tibble 또는 data.frame을 병합할 때 사용join() - 두 tibble 또는 data.frame을 병합할 때 사용위 함수들과 (특히 filter, select, mutate, summarise) 조합하여 (함수 내에서) 사용할 수 있는 helper 함수들이 같이 사용될 수 있습니다 (독립적으로도 사용 가능).\nacross\nif_any\nif_all\neverything\nstarts_with\nend_with\ncontains\n위 함수들과 (특히 filter, select, mutate, summarise) 조합하여 (함수 내에서) 사용할 수 있는 helper 함수들이 같이 사용될 수 있습니다 (독립적으로도 사용 가능).acrossif_anyif_alleverythingstarts_withend_withcontains이 함수들은 %>%와 함께 쓰이면서 강력한 성능을 발휘합니다. summarise 함수는 특정 값들의 통계 값을 계산해 주는 함수이며 그 외 함수들은 행렬 편집을 위한 함수들로 보시면 되겠습니다. 간단한 예제를 수행하면서 각각의 기능을 살펴보고 왜 dplyr이 널리 사용되고 그 장점이 무엇인지 파악해 보도록 하겠습니다.iris 데이터는 세 종류의 iris 품종에 대한 꽃잎과 꽃받침의 length와 with를 측정해 놓은 데이터 입니다. head와 str 명령어를 %>%를 이용해서 데이터를 살펴 봅니다.","code":"\nlibrary(tidyverse)\n\niris %>% head(10)\niris %>% str"},{"path":"tidyverse.html","id":"select","chapter":"8 tidyverse","heading":"8.6.1 select","text":"select() 는 주어진 데이터셋으로부터 관심있는 변수를 (column) 선택하여 보여줍니다.Exercisesbabies 데이터의 변수/구조를 확인해 보고 id, age, gestation, wt, dwt, smoke 변수만을 선택한 새로운 newbabies 데이터를 만드시오다음 helper 함수들은 select 함수와 같이 유용하게 쓰일 수 있습니다.starts_with(“abc”) - “abc” 로 시작하는 문자열을 갖는 변수 이름\nends_with(“xyz”) - “xyz”으로 끝나는 문자열을 갖는 변수 이름\ncontains(“ijk”) - “ijk” 문자열을 포함하는 변수 이름\nmatches(“(.)\\1”) - 정규식, 반복되는 문자아래는 matches 함수를 사용한 방법 입니다. 좀 더 복잡한 패턴을 적용하여 변수들을 선택할 수 있으며 grep 함수를 사용할 경우도 정규식 패턴을 적용할 수 있습니다.아래 (.)\\\\1은 하나의 문자 .가 (어떤 문자든) 한 번 더 \\\\1 사용된 변수 이름을 말하며 이는 aavar 의 aa밖에 없으므로 aavar가 선택됩니다. grep에서 ^ 표시는 맨 처음을 나타내므로 ^S는 S로 시작하는 문자가 되겠습니다. 따라서 grep(\"^S\", colnames(iris))의 경우 컬럼 이름 중 S로 시작하는 이름은 True로 그렇지 않으면 False 값을 리턴합니다.","code":"\nhead(iris)\niris %>% select(Species, everything()) %>% head(5)\niris %>% select(Species, everything())\niris %>% select(-Species)\niris %>% select(starts_with('S'))\niris %>% select(obs = starts_with('S'))\niris2 <- rename(iris, aavar = Petal.Length)\nselect(iris2, matches(\"(.)\\\\1\"))\ntmp <-iris[,3:5]\ncolnames(iris)[grep(\"^S\", colnames(iris))]\niris[,grep(\"^S\", colnames(iris))]\ntmp"},{"path":"tidyverse.html","id":"filter","chapter":"8 tidyverse","heading":"8.6.2 filter","text":"filter 함수를 사용해서 원하는 조건의 데이터 (샘플)을 골라낼 수 있습니다.filter의 ,로 구분되는 매개변수는 로직으로 묶인 조건입니다. 지난 강좌에서 보셨듯 R에서 and는 &, or는 |, 그리고 not은 ! 으로 사용하면 되며 filter에서 ,로 구분된 조건은 and와 같다고 보시면 되겠습니다.Image (https://r4ds..co.nz/)Exercises위 예제에서 만든 newbabies 데이터에서 999 값이 들어있는 값을 제외한 새로운 데이터를 만드시오","code":"\nlibrary(dplyr)\n\nhead(iris)\niris %>% \n  filter(Species==\"setosa\")\n\niris %>% \n  filter(Species==\"setosa\" | Species==\"versicolor\")\n\niris %>% \n  filter(Species==\"setosa\" & Species==\"versicolor\")\n\niris %>% \n  filter(Species==\"setosa\" | Species==\"versicolor\") %>% \n  dim"},{"path":"tidyverse.html","id":"arrange","chapter":"8 tidyverse","heading":"8.6.3 arrange","text":"arrange()는 지정된 변수를 기준으로 값의 크기순서로 샘플들의 배열 순서 즉, row의 순서를 바꾸는 기능을 수행합니다. 기본으로 크기가 커지는 순서로 정렬이 진행되며 작아지는 순서를 원할 경우 desc 함수를 사용할 수 있습니다.","code":"\niris %>% arrange(Sepal.Length)\niris %>% arrange(desc(Sepal.Length))\niris %>% arrange(Sepal.Length, Sepal.Width)"},{"path":"tidyverse.html","id":"mutate","chapter":"8 tidyverse","heading":"8.6.4 mutate","text":"mutate() 함수는 새로운 변수를 추가할 수 있는 기능을 제공하며 앞에서 배웠던 within()과 비슷하다고 볼 수 있습니다. 아래와 같이 mutate함수는 sepal_ratio라는 변수를 새로 만들어서 기존 iris 데이터들과 함께 반환해 줍니다.","code":"\niris2 <- iris %>% mutate(sepal_ratio = Sepal.Length/Sepal.Width)\nhead(iris2)"},{"path":"tidyverse.html","id":"summarise","chapter":"8 tidyverse","heading":"8.6.5 summarise","text":"summarise()는 data.frame내 특정 변수의 값들로 하나의 요약값/대푯값을 만들어 줍니다. summarise 함수는 단독으로 쓰이기 보다는 group_by() 기능과 병행해서 쓰이는 경우에 유용하게 쓰입니다. summarise_all() 함수를 사용하면 모든 변수에 대해서 지정된 함수를 실행합니다. 특히 summarise 함수는 다음과 같이 across, if_any, if_all 등의 helper 함수와 조합되어 사용이 가능합니다.","code":"\niris %>% summarise(mean(Sepal.Length), m=mean(Sepal.Width))\niris %>% \n  group_by(Species) %>% \n  summarise(mean(Sepal.Width))\n\niris %>% \n  group_by(Species) %>% \n  summarise_all(mean)\n\niris %>% \n  group_by(Species) %>% \n  summarise(across(everything(), mean))\n\n\niris %>% \n  group_by(Species) %>% \n  summarise_all(sd)\n\niris %>% \n  group_by(Species) %>% \n  summarise(across(everything(), sd))"},{"path":"tidyverse.html","id":"join","chapter":"8 tidyverse","heading":"8.6.6 join","text":"join 함수는 데이터를 병합해주는 기능을 수행하는 함수 입니다. 네 가지 종류의 함수가 있으며 (left_join(), ’right_join(), 'inner_join(), ’full_join()) 기본적으로 공통되는 이름의 변수를 (key) 이용해서 공통되는 샘플끼리 자동으로 병합해 주는 기능을 수행합니다.`에서 지정해준 파라메터의 값을 기준으로 기능이 수행 됩니다.","code":"\ndf1 <- data.frame(id=c(1,2,3,4,5,6), age=c(30, 41, 33, 56, 20, 17))\ndf2 <- data.frame(id=c(4,5,6,7,8,9), gender=c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"))\n\ninner_join(df1, df2, by=\"id\")\nleft_join(df1, df2, \"id\")\nright_join(df1, df2, \"id\")\nfull_join(df1, df2, \"id\")\n\n# vs.\ncbind(df1, df2)"},{"path":"tidyverse.html","id":"code-comparison","chapter":"8 tidyverse","heading":"8.7 Code comparison","text":"이제 split, apply, combine을 활용하여 평균을 구하는 코드와 dplyr 패키지를 사용하여 만든 코드를 비교해 보도록 하겠습니다. iris 데이터를 분석하여 품종별로 꽃받침의 길이 (Sepal.length)의 평균과 표준편차, 그리고 샘플의 수를 구해보는 코드입니다.split은 factor형 변수인 Species를 기준으로 iris 데이터를 나누어 주는 역할을 하며 lapply는 list 형 데이터인 iris_split을 각 리스트의 각각의 원소들에 대해서 임의의 함수 function(x)... 를 수행하는 역할을 합니다. 마지막 data.frame으로 최종 경로를 combine 합니다.아래는 dplyr 패키지를 사용한 코드 입니다.위에서 보듯 dplyr 패키지를 사용할 경우 그 결과는 같으나 코드의 가독성과 효율성면에서 장점을 보여줍니다. iris 데이터를 받아서 Species에 명시된 그룹으로 나누고 원하는 함수를 타깃 컬럼에 대해서 적용하라는 의미 입니다. 다음은 모든 변수에 대한 평균을 구하는 코드 입니다.자세한 ggplot의 내용은 다음시간에 학습하겠지만 각 평균에 대한 막대그래프를 그러보겠습니다.Exercises5.5의 babies 데이터를 tidyverse 패키지를 활용하여 다시 분석해 보시오 (모든 경우를 tidyverse 패키지 함수를 사용할 필요는 없음, select 를 사용할 경우 dplyr::select 로 사용하시오)babies 데이터의 변수를 확인하시오babies 데이터의 변수를 확인하시오babies 데이터의 id, age, gestation, wt, dwt, smoke 변수만을 갖는 newbabies 데이터를 만드시오babies 데이터의 id, age, gestation, wt, dwt, smoke 변수만을 갖는 newbabies 데이터를 만드시오위 2번에 더해 999로 입력된 데이터를 제외한 newbabies 데이터를 만드시오위 2번에 더해 999로 입력된 데이터를 제외한 newbabies 데이터를 만드시오위 3번에 더해 smoke 데이터를 factor 형으로 변환한 smokef 변수를 추가한 newbabies 데이터를 만드시오위 3번에 더해 smoke 데이터를 factor 형으로 변환한 smokef 변수를 추가한 newbabies 데이터를 만드시오위 4번에 더해 25세 미만의 샘플만 갖고 smoke 변수는 제외한 는 newbabies 데이터를 만드시오위 4번에 더해 25세 미만의 샘플만 갖고 smoke 변수는 제외한 는 newbabies 데이터를 만드시오Exercisesairquality 데이터에서 NA가 포함된 샘플 (row)를 제거한 myair 라는 데이터셋을 생성하시오airquality 데이터에서 NA가 포함된 샘플 (row)를 제거한 myair 라는 데이터셋을 생성하시오위 1)에 Month 변수를 factor형으로 변환한 Monthf 를 추가하고 Month와 Day 변수를 제거한 새로운 데이터셋 myair 데이터를 생성하시오위 1)에 Month 변수를 factor형으로 변환한 Monthf 를 추가하고 Month와 Day 변수를 제거한 새로운 데이터셋 myair 데이터를 생성하시오myair 데이터에서 월별로 모든 변수에 (Ozone, Solar.R, Wind, Temp) 대한 평균을 구한 후 myairmean 변수에 저장하시오 (group_by로 먼저 Monthf를 기준으로 grouping 필요, summarise_all 사용)myair 데이터에서 월별로 모든 변수에 (Ozone, Solar.R, Wind, Temp) 대한 평균을 구한 후 myairmean 변수에 저장하시오 (group_by로 먼저 Monthf를 기준으로 grouping 필요, summarise_all 사용)위 3)에 더하여 데이터를 long 형으로 바꾸고 myairmean에 저장하시오위 3)에 더하여 데이터를 long 형으로 바꾸고 myairmean에 저장하시오ggplot으로 myairmean 데이터의 월별 각 변수들의 평균 값들을 다음과 같은 bar 그래프로 그리시오ggplot으로 myairmean 데이터의 월별 각 변수들의 평균 값들을 다음과 같은 bar 그래프로 그리시오ExercisesInsectSprays 데이터는 살충제 6종에 대한 살충력을 (죽은 벌래의 마릿수) 나타내는 데이터이다. 각 살충제별로 평균과 표준편차를 구하시오Exercisesdplyr 패키지의 starwars 는 스타워즈 영화에 나오는 등장인물들을 분석한 데이터셋 이다. 종족에 따른 키의 평균과 표준편차를 구하시오. (NA 데이터는 제외하고 분석)Exercisesairquality 데이터는 뉴욕주의 몇몇 지점에서의 공기질을 측정한 데이터이다. 데이터에서 NA를 제거하고 각 월별로 평균 오존, 자외선, 풍속, 및 온도에 대한 평균과 표준편차를 구하시오참고로 errorbar가 있는 막대그래프를 그려보겠습니다. 이를 위해서 먼저 두 테이블을 병합한 후 ggplot2 패키지의 ggplot 함수를 이용해서 그래프를 그립니다. 자세한 ggplot의 내용은 다음시간에 학습하겠습니다.Exercises다음 코드를 이용해서 gse93819 실험 관련 파일들을 다운로드하여 저장하고 데이터의 구조 및 샘플들의 이름을 확인하시오샘플들의 정보에 따라서 발현 데이터를 나누시오샘플들의 정보에 따라서 발현 데이터를 나누시오각 그룹별 프루브들의 평균과 표준편차를 구하시오각 그룹별 프루브들의 평균과 표준편차를 구하시오Exercisesgse103512 데이터도 동일한 방법으로 분석해 보시오","code":"\niris_split <- split(iris, iris$Species)\niris_means <- lapply(iris_split, function(x){mean(x$Sepal.Length)})\niris_sd <- lapply(iris_split, function(x){sd(x$Sepal.Length)})\niris_cnt <- lapply(iris_split, function(x){length(x$Sepal.Length)})\niris_df <- data.frame(unlist(iris_cnt), unlist(iris_means), unlist(iris_sd))\niris_df <- iris %>% \n  group_by(Species) %>% \n  summarise(n=n(), mean=mean(Sepal.Length), sd=sd(Sepal.Length))\niris_mean_df <- iris %>% \n  group_by(Species) %>% \n  summarise(across(everything(), mean))\nlibrary(ggplot2)\n\niris_mean_df2 <- iris_mean_df %>% \n  pivot_longer(-Species)\n\nggplot(iris_mean_df2, aes(x=Species, y=value, fill=name)) +\n  geom_bar(stat=\"identity\", position=\"dodge\")ggplot(myairmean, aes(x=Monthf, y=value, fill=Monthf)) +\n  geom_bar(stat=\"identity\") +\n  theme_bw()\n\nairdata <- left_join(airmean, airsd, by=c(\"Month\", \"name\"))\n\nggplot(airdata, aes(x=Month, y=mean, fill=name)) +\n  geom_bar(stat=\"identity\", position=\"dodge\") +\n  geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), position=position_dodge(width=0.9), width=0.4)myexp <- read.csv(\"https://github.com/greendaygh/kribbr2022/raw/main/examples/gse93819_expression_values.csv\", header=T)"},{"path":"tidyverse.html","id":"참고-통계","chapter":"8 tidyverse","heading":"8.8 참고 통계","text":"https://greendaygh.github.io/Rstat2020/statistical-inference.html#two-sample-significance-tests정규분포와 t분포이해t 통계량 계산t-test 이해이 저작물은 크리에이티브 커먼즈 저작자표시-비영리-변경금지 4.0 국제 라이선스에 따라 이용할 수 있습니다.","code":""},{"path":"lecture-3-note.html","id":"lecture-3-note","chapter":"9 Lecture 3 Note","heading":"9 Lecture 3 Note","text":"","code":""},{"path":"lecture-3-note.html","id":"class-1","chapter":"9 Lecture 3 Note","heading":"9.1 Class 1","text":"","code":""},{"path":"lecture-3-note.html","id":"file-write","chapter":"9 Lecture 3 Note","heading":"9.1.1 file write","text":"package 설치package 사용하기 위해서는 library 로 불러와야 함ctrl + enter 누르면 코드청크 코드 실행 (커서가 위치한)file writingArguments 이름을 지정할 경우 순서를 바꿔도 됨","code":"\nlibrary(UsingR)\nbatting\n?batting\n\nstr(batting)\n\nbatting$playerID\nbatting$HR\nbatting$SO\n\nmydata <- data.frame(batting$playerID, batting$HR, batting$SO)\nstr(mydata)\nmydata\n\nmydata <- data.frame(playerID = batting$playerID,\n                     HR = batting$HR,\n                     SO = batting$SO)\nmydata\nwrite.table(x=mydata, file=\"mydata.txt\")\n?write.table\n\nwrite.table(mydata, \n            file = \"mydata.csv\", \n            quote = F, \n            row.names = FALSE,\n            sep = \",\")"},{"path":"lecture-3-note.html","id":"file-read","chapter":"9 Lecture 3 Note","heading":"9.1.2 file read","text":"file read상관계수회귀모형엑셀파일 읽기","code":"\nmyread <- read.table(\"mydata.csv\", sep=\",\", header = T)\nmyread\nstr(myread)\n\n?read.table\n\nmyread$HR\nplot(myread$HR, myread$SO)\nmycor <- cor(myread$HR, myread$SO)\nmycor\n\nfit <- lm(myread$HR ~ myread$SO)\n\nplot(myread$HR, myread$SO)\nabline(fit)\ntext(50, 170, round(mycor,2))\nlibrary(readxl)\n#read.table(\"mydata.xlsx\")\nmydf <- read_xlsx(\"mydata.xlsx\")\nstr(mydf)\nclass(mydf)\nmydf$playerID"},{"path":"lecture-3-note.html","id":"class-2","chapter":"9 Lecture 3 Note","heading":"9.2 class 2","text":"","code":""},{"path":"lecture-3-note.html","id":"apply-1","chapter":"9 Lecture 3 Note","heading":"9.2.1 apply","text":"반복작업apply 사용airquality data examplelist 설명ozone 의 평균 구하는 함수 만들기list 의 ozone 별 평균","code":"\n#library(UsingR)\n\nmydata <- data.frame(playerID = batting$playerID,\n                     HR = batting$HR,\n                     SO = batting$SO)\n\n\nmean(mydata$SO)\nmean(mydata[,3])\n\nmean(mydata$HR)\nmean(mydata[,2])\n\nmymean <- rep(0, 2)\nmymean <- c(0, 0)\n\nfor(i in 1:2){\n  mymean[i] <- mean(mydata[,i+1])\n}\nmymean\n\n# ctrl + shift + c 를 누르면 주석\n# x <- 1:10\n# for(i in x){\n#   cat(i, \"\\n\")\n#   flush.console()\n# }\n?apply\n\napply(mydata[,c(2,3)], 2, mean)\n?airquality\ndata(airquality)\nstr(airquality)\n\nairquality\ngrp <- airquality$Month\nclass(grp)\ngrpf <- factor(grp)\nairlist <- split(airquality, grpf)\n?split\nclass(airlist)\nairlist\n\na <- 1:100\nb <- 11:111\nclass(a)\nclass(b)\nlength(a)\nlength(b)\nmydf <- data.frame(a, b)\n\nmylist <- list(a=a, b=b)\nmylist\nmylist$a\nmylist$b\n\nmylist[[1]]\nmylist$a\nlength(airlist)\nairlist$`9`\nclass(airlist[[5]])\nmean(airlist[[5]]$Ozone)\nairlist[[5]]$Ozone\n?mean\nmean(airlist[[5]]$Ozone, na.rm=T)\nairlist\nmymean <- c(0,0,0,0,0)\nmymean[1] <- mean(airlist[[1]]$Ozone, na.rm=T)\nmymean[2] <- mean(airlist[[2]]$Ozone, na.rm=T)\nmymean[3] <- mean(airlist[[3]]$Ozone, na.rm=T)\nmymean[4] <- mean(airlist[[4]]$Ozone, na.rm=T)\nmymean[5] <- mean(airlist[[5]]$Ozone, na.rm=T)\nmymean\n\n\nlapply(airlist, function(x){mean(x$Ozone, na.rm=T)})\n\n\nmyozone <- function(x){\n  z <- mean(x$Ozone, na.rm=T)\n  return(z)\n}\nlapply(airlist, myozone)"},{"path":"lecture-3-note.html","id":"class-3","chapter":"9 Lecture 3 Note","heading":"9.3 class 3","text":"","code":""},{"path":"lecture-3-note.html","id":"graphics","chapter":"9 Lecture 3 Note","heading":"9.3.1 graphics","text":"산포도histogramboxplotbarplot","code":"\nx <- c(1:100)\ny <- x*2 + rnorm(100)\nmyxy <- data.frame(x,y)\n\n\nplot(myxy)\nplot(myxy$x, myxy$y)\nplot(x=myxy$x, y=myxy$y)\nplot(y~x, data=myxy)\nx <- rnorm(100)\nhist(x, \n     br=20, \n     xlim=c(-3,3), \n     main=\"Main text\", \n     xlab=\"X label\", \n     ylab=\"y label\")\n\nairquality$Wind\nhist(airquality$Wind, br=50)\nhist(airquality$Wind, br=10)\nx <- rnorm(100)\nclass(x)\nboxplot(x)\n\n\nmydf <- airquality[,c(1, 2, 3, 4)]\nmydf <- airquality[,c(\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\")]\nclass(mydf)\nboxplot(mydf)\nx <- sample(1:12, 200, replace = T)\nx\ntab_x <- table(x)\n\n\ny <- sample(1:12, 200, replace = T)\ntab_y <- table(y)\ntab_xy <- rbind(tab_x, tab_y)\nbarplot(tab_xy)\nbarplot(tab_xy, beside = T)\nbarplot(tab_xy, beside = T, col=c(\"darkblue\",\"red\"))\nbarplot(tab_xy, beside = T, col=c(\"darkblue\",\"red\"), xlab=\"Month\")\nbarplot(tab_xy, beside = T, col=c(\"darkblue\",\"red\"), xlab=\"Month\", horiz=TRUE, legend.text = c(\"x\", \"y\"))\nx <- rnorm(500)\nhist(x, 100)\ny <- 2*x + rnorm(500, mean=5, sd=1)\nz <- c(x,y)\nhist(z, br=100)\n\n\nhist(z, br=100, probability = T)\nzd <- density(z)\nlines(zd)\nx <- rnorm(500)\ny <- 2*x + rnorm(500, mean=5, sd=1)\nmyxy <- data.frame(x, y)\nmyxy\n\nplot(x, y, data=myxy, xlim=c(-5, 5), ylim=c(-5, 15), pch=3)\nidx <- which(x<0)\npoints(x[idx], y[idx], col=\"red\")\nfit <- lm(y~x)\nabline(fit)\n\n\nplot(y~x, data=myxy, xlim=c(-5, 5), ylim=c(-5, 15), pch=3)\nidx <- which(x<0)\npoints(myxy[idx,], col=\"red\")\nfit <- lm(y~x, data=myxy)\nabline(fit)"},{"path":"lecture-3-note.html","id":"tidyverse-1","chapter":"9 Lecture 3 Note","heading":"9.3.2 tidyverse","text":"우선 필요한 패키지 설치 및 로딩code chunk shortcut CTRL + ALT + IA 41 O M D\n190 S M Ddplyrpipe operator 단축키 shift + ctrl + mfilterairquality 평균","code":"\n#library(tidyverse)\n#install.packages(\"tibble\")\n#install.packages(\"dplyr\")\n#install.packages(\"tidyr\")\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(tidyr)\ndf1 <- data.frame(x = 1:3, y = 3:1)\nclass(df1)\ndf1\n\ndf2 <- tibble(df1)\nclass(df2)\nairquality\n\nmyair <- airquality[1:5,]\nmyair_long <- pivot_longer(myair, cols = c(\"Ozone\", \"Solar.R\", \"Wind\", \"Temp\"))\nmyair_long \nmyair_long2 <- pivot_longer(myair, c(Ozone, Solar.R, Wind, Temp))\nmyair_long2 \nmyair_long3 <- pivot_longer(myair, !c(Month, Day))\nmyair_long3\n\n?pivot_longer\n\nmyair_long <- pivot_longer(myair, \n                          c(Ozone, Solar.R, Wind, Temp), \n                          names_to = \"Type\", \n                          values_to = \"Observation\")\n\nmyair_long\n\nstocks <- tibble(\n  year   = c(2015, 2015, 2016, 2016),\n  month  = c(   1,    2,     1,    2),\n  profit = c(1.88, 0.59, 0.92, 0.17)\n)\n\nstocks\npivot_wider(stocks, names_from = year, values_from = profit)\n?pivot_wider\nlibrary(dplyr)\n\nx <- 1:100\ny <- mean(x)\nz <- sin(y)\nsqrt(z)\n\nsqrt(sin(mean(1:100)))\n\n1:100 %>% mean %>% sin %>% sqrt\n\n1:100 %>% \n  mean %>% \n  sin %>% \n  sqrt\n\n\nx <- 1:5\npaste(x, \"a\", sep=\"-\")\nx %>% \n  paste(\"a\", sep=\"-\") %>% \n  paste(collapse = \":\")\n\nhead(iris)\n\niris %>% head\n\niris %>% filter(Species==\"setosa\")\niris %>% filter(Species==\"setosa\" | Species==\"versicolor\")\niris %>% filter(Species==\"setosa\" & Species==\"versicolor\")\niris %>% \n  filter(Species==\"setosa\" | Species==\"versicolor\") %>% \n  str\n\n\n\niris %>% select(Species, everything()) %>% head(5)\niris %>% select(Species, everything())\niris %>% select(-Species)\niris %>% select(Petal.Length, starts_with('S'))\niris %>% select(starts_with('S'))\niris %>% select(obs = starts_with('S'))\n\niris\nirisratio <- iris$Sepal.Length/iris$Sepal.Width\niris2 <- cbind(iris, irisratio)\n\niris2 <- iris %>% mutate(sepal_ratio = Sepal.Length/Sepal.Width)\nhead(iris2)\n\n\n\niris %>% summarise(m1 = mean(Sepal.Length), m2 = mean(Sepal.Width))\niris %>% \n  group_by(Species) %>% \n  summarise(mean(Sepal.Width))\n\nairquality %>% \n  group_by(Month) %>% \n  summarise(mean(Ozone, na.rm=T))"},{"path":"lecture-4-note.html","id":"lecture-4-note","chapter":"10 Lecture 4 Note","heading":"10 Lecture 4 Note","text":"","code":""},{"path":"lecture-4-note.html","id":"class-1-1","chapter":"10 Lecture 4 Note","heading":"10.1 Class 1","text":"강의노트 주소 https://greendaygh.github.io/kribbr2022/index.htmlRmarkdown 사용시 코드 청크 입력 Ctrl + Alt + itidyverse 설치시 dbplyr 패키지 문제로 설치가 되지 않음. 우선 아래 4개 패키지 개별 설치 후 진행Shortcut Ctrl + enter: 커서 있는 라인 콘솔에서 실행인덱싱에 의한 subset과 subset 함수를 이용한 subset인덱스 (숫자)로만 인덱싱하는 방식은 지양함 (가독률 낮음)subset 함수 사용할 수 있으며 tidyverse 패키지의 dplyr::select 사용 추천apply, lapply 많이 씀gse93819 예제 데이터 두 그룹으로 나누고 각 유전자별 평균발현데이터를 둘로 나누고 각 그룹의 유전자 발현 평균 구하기cbind 주의점: 이름이 달라도 병합이 되고 이런 문제 때문에 dplyr join 사용airquality long 형 변환pipe operator short cut: SHift + ctrl + m","code":"\n\n#install.packages(\"tidyverse\")\ninstall.packages(\"tibble\")\ninstall.packages(\"tidyr\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"ggplot2\")\n\nlibrary(UsingR)\nstr(babies)\n\nhead(babies)\n\n## variables \n\nnewbabies <- babies[,c(\"gestation\", \"dwt\")]\nhead(newbabies)\n\nnewbabies[newbabies==999] <- NA\nnewbabies\n\ndf <- subset(babies, select=c(gestation, wt, dwt))\ndf\nmean(df$gestation)\nmean(df$wt)\nmean(df$dwt)\n\napply(df, 2, mean)\n?apply\n# 1st column\nbabies[,1]\nbabies[,c(1, 5)]\n\ndf <- subset(babies, select=c(id, gestation))\n\nairquality\nstr(airquality)\nclass(airquality)\ngrp <- factor(airquality$Month)\ngrp\nclass(grp)\n\nairlist <- split(airquality, grp)\nairlist\nclass(airlist)\n\n# remove Month, Day\ndf <- subset(airquality, select=-c(Month, Day))\ndf\ndf2 <- split(df, grp)\nlength(df2)\n\nlapply(df2, colMeans)\n\ncolMeans(df2$`5`, na.rm = T)\n\nlapply(df2, colMeans, na.rm = T)\n\nmyexp <- read.csv(\"https://raw.githubusercontent.com/greendaygh/kribbr2022/main/examples/gse93819_expression_values.csv\", header=T)https://raw.githubusercontent.com/greendaygh/kribbr2022/main/examples/gse93819_expression_values.csv\n\n위 주소 그대로 복사 후 브라우저 주소창에 입력\nCTRL + A 로 모두 선택 후 CTRL+C 복사 \nRstudio > File > New file > Text file 생성 후 붙여넣기\nCTRL + S \"myexample1.csv\"로 저장 \n\n\nmyexp <- read.csv(\"myexample1.csv\", header=T)\nstr(myexp)\n\nhead(myexp)\nmyexp1 <- myexp[,1:10]\nmyexp2 <- myexp[,11:20]\n\nmyexp1mean <- apply(myexp1, 1, mean)\nmyexp2mean <- apply(myexp2, 1, mean)\n\nmyexpmean <- cbind(myexp1mean, myexp2mean)\nmyexpmean\n\nhead(names(myexp1mean))\nhead(names(myexp2mean))\nhead(myexpmean)\n\nnames(myexp1mean)[1] <- \"myexp\"\n\nhead(names(myexp1mean))\nhead(names(myexp2mean))\nmyexpmean2 <- cbind(myexp1mean, myexp2mean)\nhead(myexpmean2)\n\nplot(myexpmean)\n\nclass(myexpmean)\nstr(myexpmean)\ndf <- as.data.frame(myexpmean)\nstr(df)\n\nplot(df)\nmydiff <- df$myexp1mean - df$myexp2mean\nmydiff\nhist(mydiff, br=100)\nlibrary(dplyr)\nlibrary(tidyr)\n\ndata(airquality)\n\nairquality %>% head\nairquality %>% str\n\nairquality %>% \n   pivot_longer(c(Ozone, Solar.R, Wind, Temp))\n\nmyexpmeandf <- as.data.frame(myexpmean)\nmyexpmeandf %>% str\nmyexpmeandf %>% head\n\nmyexpmeandf %>% \n  pivot_longer(c(myexp1mean, myexp2mean))\nbabies %>% str\n\nnewbabies <- babies %>% \n  dplyr::select(id, age, gestation, wt, dwt, smoke)\nnewbabies %>% str\n\nnewbabies %>% \n  filter(gestation != 999 & dwt != 999) "},{"path":"lecture-4-note.html","id":"class-2-1","chapter":"10 Lecture 4 Note","heading":"10.2 Class 2","text":"random sequence 생성 grep, grepl 실습dplyr의 주요 함수들과 같이 사용되는 helper functionNA 제외 후 새로 데이터 생성arrange 기존 방법과 비교mutate 새로운 변수 추가 가능summarise 를 이용해서 타입별 평균과 표준편차 구하기cbind 대신 join 사용ggplot meanggplot error bargse93819를 4개 그룹으로 나누고 각 그룹별 평균, 표준편차 구하고 barplot 그리기산포도 그리고 평균보다 2배 이상 차이나는 유전자를 골라서 색을 다르게 그리기기","code":"\n\nmydna <- sample(c(\"A\", \"C\", \"G\", \"T\"), 20, replace = T)\nmydna <- paste(mydna, collapse = \"\")\n\nn <- 100\nmydna <- rep(\"\", n) \nmydna\n\n## case1\nfor(i in 1:n){\n  mydna[i] <- paste(sample(c(\"A\", \"C\", \"G\", \"T\"), 20, replace = T), \n                    collapse = \"\")\n}\nmydna\n\n## case2\nmydna <- rep(\"\", n)\nfor(i in 1:n){\n  mydna[i] <- sample(c(\"A\", \"C\", \"G\", \"T\"), 20, replace = T) %>% \n    paste(collapse = \"\")\n}\nmydna\n\n## case3\nmydna <- sapply(1:n, function(x){\n  sample(c(\"A\", \"C\", \"G\", \"T\"), 20, replace = T) %>% \n    paste(collapse = \"\")\n})\nmydna\n\n## return index\ngrep(\"ATG\", mydna) \n\ngrepl(\"ATG\", mydna)\n\ngrep(\"Se\", colnames(iris))\ncolnames(iris)[grep(\"Se\", colnames(iris))]\n\n#newbabies %>% \n#  filter(man1 != 999 & man2 != 999.. )  x\n\n#newbabies$gestation == 999\nnewbabies %>% \n  filter(!if_any(.fns = function(x){x==999}))\n\nis.na(airquality$Ozone)\nairquality$Ozone\n\nmynewdata <- airquality %>% \n  filter(!if_any(.fns=is.na))\nmynewdata\nmynewdata$Ozone\nsort(mynewdata$Ozone)\ni <- order(mynewdata$Ozone) # return index\ni\nmynewdata[i,]\n\n\nmynewdata %>% \n  arrange(Ozone) \nclass(myexpmean)\ndf <- as.data.frame(myexpmean)\nclass(df)\nnewdf <- df %>% \n  mutate(diff = sqrt((myexp1mean-myexp2mean)^2))\n  \nnewdf$diff > mean(newdf$diff)\n\nnewdf <- df %>% \n  mutate(diff = sqrt((myexp1mean-myexp2mean)^2)) %>% \n  mutate(diffl = diff>mean(diff))\n\nnewdf %>% \n  filter(diffl==T)\niris %>% str\n\niris %>% \n  group_by(Species) %>% \n  summarise(Sepal.Length.mean = mean(Sepal.Length),\n            Sepal.Width.mean = mean(Sepal.Width))\n\n\nirismean <- iris %>% \n  group_by(Species) %>% \n  summarise(across(.fns=mean))\n\nirissd <- iris %>% \n  group_by(Species) %>% \n  summarise(across(.fns=sd))\ndf1 <- data.frame(id=c(1,2,3,4,5,6), age=c(30, 41, 33, 56, 20, 17))\ndf2 <- data.frame(id=c(4,5,6,7,8,9), gender=c(\"f\", \"f\", \"m\", \"m\", \"f\", \"m\"))\n\ninner_join(df1, df2, by=\"id\")\nleft_join(df1, df2, \"id\")\nright_join(df1, df2, \"id\")\nfull_join(df1, df2, \"id\")\nirismean\nirissd\n\nirisplot <- irismean %>% \n  pivot_longer(-Species)\n\nggplot(irisplot, aes(x=Species, y=value, fill=name)) +\n  geom_bar(stat=\"identity\", position=\"dodge\") \n\nd1 <- irismean %>% \n  pivot_longer(-Species)\n\nd2 <- irissd %>% \n  pivot_longer(-Species)\n\ndf <- left_join(d1, d2, by=c(\"Species\", \"name\"))\ndf\nggplot(df, aes(x=Species, y=value.x, fill=name)) +\n  geom_bar(stat=\"identity\", position=\"dodge\") +\n  geom_errorbar(aes(ymin=value.x-value.y, ymax=value.x+value.y),\n                position=position_dodge(width=0.9), \n                width=0.4)\ntmpid <- rep(c(\"A\", \"B\", \"C\", \"D\"), each=5)\ngroupid <- paste(tmpid, 1:5, sep=\"\")\ngroupid\n\ncolnames(myexp) <- groupid\n\ndata_meana <- myexp %>% \n  dplyr::select(starts_with(\"A\")) %>% \n  apply(1, mean)\n  \ndata_meanb <- myexp %>% \n  dplyr::select(starts_with(\"B\")) %>% \n  apply(1, mean)\n  \ndata_sda <- myexp %>% \n  dplyr::select(starts_with(\"A\")) %>% \n  apply(1, sd)\n\ndata_sdb <- myexp %>% \n  dplyr::select(starts_with(\"B\")) %>% \n  apply(1, sd)\n\nmydata <- data.frame(data_meana,\n           data_meanb,\n           data_sda,\n           data_sdb)\n\nmydata\n\n## for the rownames_to_column()\nlibrary(tibble)\n\nmydataplot <- mydata %>% \n  rownames_to_column() %>% \n  pivot_longer(-rowname)\n  \nd1 <- mydataplot %>% \n  filter(grepl(\"data_mean\",name)) %>% \n  slice(1:100) \n\nd2 <- mydataplot %>% \n  filter(grepl(\"data_sd\",name)) %>% \n  slice(1:100) \n\nggplot(d1, aes(x=rowname, y=value, fill=name)) +\n    geom_bar(stat=\"identity\", position=\"dodge\") \n  "}]
